// Author: Igor compiler
// Compiler version: igorc 2.0.6
// DO NOT EDIT THIS FILE - it is machine generated

using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Igor.Web;

using JsonSerializer = Json.Serialization.JsonSerializer;

namespace WebProtocol
{
    public enum OrderDirection
    {
        Asc = 1,
        Desc = 2,
    }

    public enum GameEngine
    {
        /// <summary>
        /// Generic
        /// </summary>
        Generic = 1,
        /// <summary>
        /// Unreal Engine 4
        /// </summary>
        Ue4 = 2,
        /// <summary>
        /// Unity3D
        /// </summary>
        Unity = 3,
        /// <summary>
        /// Hydra Engine
        /// </summary>
        Hydra = 4,
        /// <summary>
        /// CryEngine
        /// </summary>
        Cry = 5,
    }

    public enum Currency
    {
        Eur = 1,
        Usd = 2,
        Rub = 3,
    }

    public enum GameOwnership
    {
        None = 1,
        Purchase = 2,
        Grant = 3,
        Employee = 4,
    }

    public enum ClientRegistrationError
    {
        Failure = 1,
        InvalidEmail = 2,
        InvalidUsername = 3,
        InvalidPassword = 4,
        EmailAlreadyRegistered = 5,
        UsernameAlreadyRegistered = 6,
        AlreadyLoggedIn = 7,
        InvalidCaptchaKey = 8,
        InvalidCaptchaResponse = 9,
        CaptchaExpired = 10,
    }

    public enum ClientLoginError
    {
        Failure = 1,
        AlreadyLoggedIn = 2,
        AccountNotExists = 3,
        AccountNotActivated = 4,
        AccountIsBlocked = 5,
        AccountIsDeleted = 6,
        InvalidPassword = 7,
    }

    public enum ClientPasswordResetError
    {
        Failure = 1,
        InvalidNewPassword = 2,
        InvalidCaptchaKey = 3,
        InvalidCaptchaResponse = 4,
        CaptchaExpired = 5,
    }

    public enum ClientPasswordChangeError
    {
        Failure = 1,
        InvalidCurrentPassword = 2,
        InvalidNewPassword = 3,
        NotLoggedIn = 4,
    }

    public enum PersonnelLoginError
    {
        Failure = 1,
        AlreadyLoggedIn = 2,
        AccountNotExists = 3,
        AccountIsBlocked = 4,
        AccountIsDeleted = 5,
        InvalidPassword = 6,
    }

    public enum CaptchaError
    {
        Failure = 1,
    }

    public enum GameOrderBy
    {
        Id = 1,
        Title = 2,
        Description = 3,
        Price = 4,
        Currency = 5,
        IsPublished = 6,
        IsDisabled = 7,
        IsDeleted = 8,
        CreatedAt = 9,
        UpdatedAt = 10,
    }

    public enum GameCreateError
    {
        Failure = 1,
        GameIdAlreadyExists = 2,
        GameTitleAlreadyExists = 3,
        InvalidPrice = 4,
        InvalidCurrency = 5,
    }

    public enum GameUpdateError
    {
        Failure = 1,
        RevMismatch = 2,
        NothingToUpdate = 3,
        GameTitleAlreadyExists = 4,
        InvalidGameTitle = 5,
        InvalidJiraKey = 6,
        InvalidSeleneKey = 7,
        InvalidCiUrl = 8,
        InvalidDiscordUrl = 9,
        InvalidPrice = 10,
        InvalidCurrency = 11,
        InvalidBuildLifetime = 12,
    }

    public enum GameBranchOrderBy
    {
        Id = 1,
        Title = 2,
        BuildId = 3,
        BuildRev = 4,
        BuildTotalSize = 5,
        BuildCompressedSize = 6,
        BuildCreatedAt = 7,
        IsPublic = 8,
        IsDefault = 9,
        IsDeleted = 10,
        CreatedAt = 11,
        UpdatedAt = 12,
    }

    public enum GameBranchCreateError
    {
        Failure = 1,
        BranchTitleAlreadyExists = 2,
        InvalidGameId = 3,
        InvalidBranchTitle = 4,
    }

    public enum GameBranchUpdateError
    {
        Failure = 1,
        RevMismatch = 2,
        NothingToUpdate = 3,
        BranchTitleAlreadyExists = 4,
        InvalidBranchTitle = 5,
    }

    public enum GameBranchBuildError
    {
        Failure = 1,
        InvalidBuildId = 2,
    }

    public enum ClientAccountOrderBy
    {
        Id = 1,
        Username = 2,
        Email = 3,
        IsActivated = 4,
        IsBlocked = 5,
        IsDeleted = 6,
        CreatedAt = 7,
        UpdatedAt = 8,
    }

    public enum PersonnelAccountOrderBy
    {
        Id = 1,
        Username = 2,
        Email = 3,
        IsBlocked = 4,
        IsDeleted = 5,
        CreatedAt = 6,
        UpdatedAt = 7,
    }

    public enum BuildOrderBy
    {
        Id = 1,
        GameId = 2,
        GameTitle = 3,
        BuildRev = 4,
        TotalSize = 5,
        CompressedSize = 6,
        IsDeleted = 7,
        CreatedAt = 8,
        UpdatedAt = 9,
    }

    public enum BuildUpdateError
    {
        Failure = 1,
        RevMismatch = 2,
        NothingToUpdate = 3,
    }

    public enum BuildDeleteError
    {
        Failure = 1,
        AlreadyDeleted = 2,
        HasAssignedBranches = 3,
    }

    public enum PopularGameOrderBy
    {
        Purchases = 1,
    }

    public interface IResult
    {
        bool Result { get; set; }
    }

    public sealed class GenericResponse : IResult
    {
        public bool Result { get; set; }

        public GenericResponse()
        {
        }
    }

    public sealed class Empty
    {
        public Empty()
        {
        }
    }

    public sealed class CollectionSlice<T>
    {
        public int Total { get; set; }

        public List<T> Items { get; set; }

        public CollectionSlice()
        {
        }
    }

    public sealed class Price
    {
        public long Amount { get; set; }

        public Currency Currency { get; set; }

        public Price()
        {
        }
    }

    public sealed class ClientStatusResponse
    {
        public bool LoggedIn { get; set; }

        public long? UserId { get; set; }

        public string Email { get; set; }

        public string Username { get; set; }

        public ClientStatusResponse()
        {
        }
    }

    public sealed class ClientRegisterRequest
    {
        public string Email { get; set; }

        public string Username { get; set; }

        public string Password { get; set; }

        public string CaptchaKey { get; set; }

        public string CaptchaAnswer { get; set; }

        public ClientRegisterRequest()
        {
        }
    }

    public sealed class ClientRegisterResponse : IResult
    {
        public bool Result { get; set; }

        public ClientRegistrationError? Error { get; set; }

        public ClientRegisterResponse()
        {
        }
    }

    public sealed class ClientRegisterConfirmRequest
    {
        public string Username { get; set; }

        public string SecurityCode { get; set; }

        public ClientRegisterConfirmRequest()
        {
        }
    }

    public sealed class ClientResendRequest
    {
        public string Username { get; set; }

        public ClientResendRequest()
        {
        }
    }

    public sealed class ClientLoginRequest
    {
        public string Username { get; set; }

        public string Password { get; set; }

        public ClientLoginRequest()
        {
        }
    }

    public sealed class ClientLoginResponse : IResult
    {
        public bool Result { get; set; }

        public ClientLoginError? Error { get; set; }

        public string SessionId { get; set; }

        public ClientLoginResponse()
        {
        }
    }

    public sealed class ClientPasswordResetRequest
    {
        public string Username { get; set; }

        public string NewPassword { get; set; }

        public string CaptchaKey { get; set; }

        public string CaptchaAnswer { get; set; }

        public ClientPasswordResetRequest()
        {
        }
    }

    public sealed class ClientPasswordResetResponse : IResult
    {
        public bool Result { get; set; }

        public ClientPasswordResetError? Error { get; set; }

        public ClientPasswordResetResponse()
        {
        }
    }

    public sealed class ClientPasswordResetConfirmRequest
    {
        public string Username { get; set; }

        public string SecurityCode { get; set; }

        public ClientPasswordResetConfirmRequest()
        {
        }
    }

    public sealed class ClientPasswordChangeRequest
    {
        public string CurrentPassword { get; set; }

        public string NewPassword { get; set; }

        public ClientPasswordChangeRequest()
        {
        }
    }

    public sealed class ClientPasswordChangeResponse : IResult
    {
        public bool Result { get; set; }

        public ClientPasswordChangeError? Error { get; set; }

        public ClientPasswordChangeResponse()
        {
        }
    }

    public sealed class PersonnelStatusResponse
    {
        public bool LoggedIn { get; set; }

        public long? UserId { get; set; }

        public string Email { get; set; }

        public string Username { get; set; }

        public PersonnelStatusResponse()
        {
        }
    }

    public sealed class PersonnelLoginRequest
    {
        public string Username { get; set; }

        public string Password { get; set; }

        public PersonnelLoginRequest()
        {
        }
    }

    public sealed class PersonnelLoginResponse : IResult
    {
        public bool Result { get; set; }

        public PersonnelLoginError? Error { get; set; }

        public string SessionId { get; set; }

        public long? UserId { get; set; }

        public string Email { get; set; }

        public string Username { get; set; }

        public PersonnelLoginResponse()
        {
        }
    }

    public sealed class CaptchaResponse : IResult
    {
        public bool Result { get; set; }

        public CaptchaError? Error { get; set; }

        public string CaptchaKey { get; set; }

        public string Filename { get; set; }

        public CaptchaResponse()
        {
        }
    }

    public sealed class GameBranchItem
    {
        public string Name { get; set; }

        public bool IsDefault { get; set; }

        public string Build { get; set; }

        public string BuildTime { get; set; }

        public string BuildChangeList { get; set; }

        public long Size { get; set; }

        public long CompressedSize { get; set; }

        public string ExePath { get; set; }

        public string LogPath { get; set; }

        public string RootUrl { get; set; }

        public GameEngine? GameEngine { get; set; }

        public bool IsReportable { get; set; }

        public GameBranchItem()
        {
        }
    }

    public sealed class GameBranch
    {
        public long Id { get; set; }

        public int Rev { get; set; }

        public string GameId { get; set; }

        public string GameTitle { get; set; }

        public string Title { get; set; }

        public string Description { get; set; }

        public string Password { get; set; }

        public long? BuildId { get; set; }

        public string BuildRev { get; set; }

        public string BuildCommentary { get; set; }

        public string BuildChangeList { get; set; }

        public long? BuildTotalSize { get; set; }

        public long? BuildCompressedSize { get; set; }

        public string BuildExePath { get; set; }

        public string BuildLogPath { get; set; }

        public string BuildCdnRootUrl { get; set; }

        public string BuildCreatedAt { get; set; }

        public GameEngine? GameEngine { get; set; }

        public bool IsReportable { get; set; }

        public bool IsPublic { get; set; }

        public bool IsDefault { get; set; }

        public bool IsDeleted { get; set; }

        public string CreatedAt { get; set; }

        public string UpdatedAt { get; set; }

        public GameBranch()
        {
        }
    }

    public sealed class GameItem
    {
        public string Guid { get; set; }

        public string Title { get; set; }

        public string Description { get; set; }

        public string JiraKey { get; set; }

        public string SeleneKey { get; set; }

        public string DiscordUrl { get; set; }

        public List<GameBranchItem> Branches { get; set; }

        public Price Price { get; set; }

        public GameOwnership Ownership { get; set; }

        public string OwnershipUntil { get; set; }

        public GameItem()
        {
            Branches = new List<GameBranchItem>() { };
        }
    }

    public sealed class Game
    {
        public string Id { get; set; }

        public int Rev { get; set; }

        public string Title { get; set; }

        public string Description { get; set; }

        public string JiraKey { get; set; }

        public string SeleneKey { get; set; }

        public string CiUrl { get; set; }

        public string DiscordUrl { get; set; }

        public double Price { get; set; }

        public string Currency { get; set; }

        public int BuildLifetime { get; set; }

        public bool IsPublished { get; set; }

        public bool IsDisabled { get; set; }

        public bool IsDeleted { get; set; }

        public string CreatedAt { get; set; }

        public string UpdatedAt { get; set; }

        public Game()
        {
        }
    }

    public sealed class GameFile
    {
        public string RelativePath { get; set; }

        public string RelativeCompressedPath { get; set; }

        public string Md5 { get; set; }

        public long Size { get; set; }

        public long CompressedSize { get; set; }

        public GameFile()
        {
        }
    }

    public sealed class GameItemList
    {
        public List<GameItem> Games { get; set; }

        public GameItemList()
        {
            Games = new List<GameItem>() { };
        }
    }

    public sealed class GameManifest
    {
        public List<GameFile> Files { get; set; }

        public GameManifest()
        {
            Files = new List<GameFile>() { };
        }
    }

    public sealed class BranchUnlockRequest
    {
        public string Password { get; set; }

        public BranchUnlockRequest()
        {
        }
    }

    public sealed class GameCreateRequest
    {
        public string Id { get; set; }

        public string Title { get; set; }

        public double Price { get; set; }

        public string Currency { get; set; }

        public GameCreateRequest()
        {
        }
    }

    public sealed class GameCreateResponse : IResult
    {
        public bool Result { get; set; }

        public GameCreateError? Error { get; set; }

        public Game Game { get; set; }

        public GameCreateResponse()
        {
        }
    }

    public sealed class GameUpdateRequest
    {
        public string Title { get; set; }

        public string Description { get; set; }

        public string JiraKey { get; set; }

        public string SeleneKey { get; set; }

        public string CiUrl { get; set; }

        public string DiscordUrl { get; set; }

        public double? Price { get; set; }

        public string Currency { get; set; }

        public int? BuildLifetime { get; set; }

        public bool? IsPublished { get; set; }

        public bool? IsDisabled { get; set; }

        public bool? IsDeleted { get; set; }

        public GameUpdateRequest()
        {
        }
    }

    public sealed class GameUpdateResponse : IResult
    {
        public bool Result { get; set; }

        public GameUpdateError? Error { get; set; }

        public Game Game { get; set; }

        public GameUpdateResponse()
        {
        }
    }

    public sealed class GameBranchCreateRequest
    {
        public string Title { get; set; }

        public string Description { get; set; }

        public string Password { get; set; }

        public GameEngine GameEngine { get; set; }

        public GameBranchCreateRequest()
        {
        }
    }

    public sealed class GameBranchCreateResponse : IResult
    {
        public bool Result { get; set; }

        public GameBranchCreateError? Error { get; set; }

        public GameBranch Branch { get; set; }

        public GameBranchCreateResponse()
        {
        }
    }

    public sealed class GameBranchUpdateRequest
    {
        public string Title { get; set; }

        public string Description { get; set; }

        public string Password { get; set; }

        public GameEngine? GameEngine { get; set; }

        public bool? IsReportable { get; set; }

        public bool? IsPublic { get; set; }

        public bool? IsDeleted { get; set; }

        public GameBranchUpdateRequest()
        {
        }
    }

    public sealed class GameBranchUpdateResponse : IResult
    {
        public bool Result { get; set; }

        public GameBranchUpdateError? Error { get; set; }

        public GameBranch Branch { get; set; }

        public GameBranchUpdateResponse()
        {
        }
    }

    public sealed class GameBranchBuildRequest
    {
        public long BuildId { get; set; }

        public GameBranchBuildRequest()
        {
        }
    }

    public sealed class GameBranchBuildResponse : IResult
    {
        public bool Result { get; set; }

        public GameBranchBuildError? Error { get; set; }

        public GameBranch Branch { get; set; }

        public GameBranchBuildResponse()
        {
        }
    }

    public sealed class ClientAccount
    {
        public long Id { get; set; }

        public int Rev { get; set; }

        public string Username { get; set; }

        public string Email { get; set; }

        public string Phone { get; set; }

        public bool IsActivated { get; set; }

        public bool IsBlocked { get; set; }

        public bool IsDeleted { get; set; }

        public string CreatedAt { get; set; }

        public string UpdatedAt { get; set; }

        public ClientAccount()
        {
        }
    }

    public sealed class PersonnelAccount
    {
        public long Id { get; set; }

        public int Rev { get; set; }

        public string Username { get; set; }

        public string Email { get; set; }

        public string Phone { get; set; }

        public bool IsBlocked { get; set; }

        public bool IsDeleted { get; set; }

        public string CreatedAt { get; set; }

        public string UpdatedAt { get; set; }

        public PersonnelAccount()
        {
        }
    }

    public sealed class Settings
    {
        public int PersonnelSessionDuration { get; set; }

        public int ClientSessionDuration { get; set; }

        public int RegisterConfirmCodeLifetime { get; set; }

        public int PhoneConfirmCodeLifetime { get; set; }

        public int PasswordResetConfirmCodeLifetime { get; set; }

        public Settings()
        {
        }
    }

    public sealed class SettingsUpdateRequest
    {
        public int? PersonnelSessionDuration { get; set; }

        public int? ClientSessionDuration { get; set; }

        public int? RegisterConfirmCodeLifetime { get; set; }

        public int? PhoneConfirmCodeLifetime { get; set; }

        public int? PasswordResetConfirmCodeLifetime { get; set; }

        public SettingsUpdateRequest()
        {
        }
    }

    public sealed class Build
    {
        public long Id { get; set; }

        public int Rev { get; set; }

        public string GameId { get; set; }

        public string GameTitle { get; set; }

        public List<string> BranchTags { get; set; }

        public string BuildRev { get; set; }

        public string Commentary { get; set; }

        public string ChangeList { get; set; }

        public long TotalSize { get; set; }

        public long CompressedSize { get; set; }

        public string ExePath { get; set; }

        public string LogPath { get; set; }

        public string CdnRootUrl { get; set; }

        public bool IsPermanent { get; set; }

        public bool IsDeleted { get; set; }

        public string CreatedAt { get; set; }

        public string UpdatedAt { get; set; }

        public Build()
        {
        }
    }

    public sealed class BuildUpdateRequest
    {
        public string Commentary { get; set; }

        public string ChangeList { get; set; }

        public bool? IsPermanent { get; set; }

        public BuildUpdateRequest()
        {
        }
    }

    public sealed class BuildUpdateResponse : IResult
    {
        public bool Result { get; set; }

        public BuildUpdateError? Error { get; set; }

        public Build Build { get; set; }

        public BuildUpdateResponse()
        {
        }
    }

    public sealed class BuildDeleteResponse : IResult
    {
        public bool Result { get; set; }

        public BuildDeleteError? Error { get; set; }

        public Build Build { get; set; }

        public BuildDeleteResponse()
        {
        }
    }

    public sealed class PopularGame
    {
        public string Id { get; set; }

        public string Title { get; set; }

        public string Description { get; set; }

        public double Price { get; set; }

        public string Currency { get; set; }

        public int Purchases { get; set; }

        public PopularGame()
        {
        }
    }

    public sealed class OrderDirectionJsonSerializer : Json.Serialization.IJsonSerializer<OrderDirection>, Json.Serialization.IJsonKeySerializer<OrderDirection>
    {
        public static readonly OrderDirectionJsonSerializer Instance = new OrderDirectionJsonSerializer();

        public Json.ImmutableJson Serialize(OrderDirection value)
        {
            return SerializeKey(value);
        }

        public OrderDirection Deserialize(Json.ImmutableJson json)
        {
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(OrderDirection value)
        {
            switch (value)
            {
                case OrderDirection.Asc: return "asc";
                case OrderDirection.Desc: return "desc";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public OrderDirection DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "asc": return OrderDirection.Asc;
                case "desc": return OrderDirection.Desc;
                default: throw new System.ArgumentException(nameof(jsonKey));
            }
        }
    }

    public sealed class GameEngineJsonSerializer : Json.Serialization.IJsonSerializer<GameEngine>, Json.Serialization.IJsonKeySerializer<GameEngine>
    {
        public static readonly GameEngineJsonSerializer Instance = new GameEngineJsonSerializer();

        public Json.ImmutableJson Serialize(GameEngine value)
        {
            return SerializeKey(value);
        }

        public GameEngine Deserialize(Json.ImmutableJson json)
        {
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(GameEngine value)
        {
            switch (value)
            {
                case GameEngine.Generic: return "generic";
                case GameEngine.Ue4: return "ue4";
                case GameEngine.Unity: return "unity";
                case GameEngine.Hydra: return "hydra";
                case GameEngine.Cry: return "cry";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public GameEngine DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "generic": return GameEngine.Generic;
                case "ue4": return GameEngine.Ue4;
                case "unity": return GameEngine.Unity;
                case "hydra": return GameEngine.Hydra;
                case "cry": return GameEngine.Cry;
                default: throw new System.ArgumentException(nameof(jsonKey));
            }
        }
    }

    public sealed class GenericResponseJsonSerializer : Json.Serialization.IJsonSerializer<GenericResponse>
    {
        public static readonly GenericResponseJsonSerializer Instance = new GenericResponseJsonSerializer();

        public Json.ImmutableJson Serialize(GenericResponse value)
        {
            var json = new Json.JsonObject();
            json["result"] = JsonSerializer.Bool.Serialize(value.Result);
            return json;
        }

        public GenericResponse Deserialize(Json.ImmutableJson json)
        {
            var result = new GenericResponse();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, GenericResponse value)
        {
            value.Result = JsonSerializer.Bool.Deserialize(json["result"]);
        }
    }

    public sealed class EmptyJsonSerializer : Json.Serialization.IJsonSerializer<Empty>
    {
        public static readonly EmptyJsonSerializer Instance = new EmptyJsonSerializer();

        public Json.ImmutableJson Serialize(Empty value)
        {
            var json = new Json.JsonObject();

            return json;
        }

        public Empty Deserialize(Json.ImmutableJson json)
        {
            var result = new Empty();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, Empty value)
        {
        }
    }

    public sealed class CollectionSliceJsonSerializer<T> : Json.Serialization.IJsonSerializer<CollectionSlice<T>>
    {
        Json.Serialization.IJsonSerializer<T> t;

        public CollectionSliceJsonSerializer(Json.Serialization.IJsonSerializer<T> t)
        {
            this.t = t;
        }

        public Json.ImmutableJson Serialize(CollectionSlice<T> value)
        {
            if (value.Items == null)
                throw new System.InvalidOperationException("Required property Items is null");
            var json = new Json.JsonObject();
            json["total"] = JsonSerializer.Int.Serialize(value.Total);
            json["items"] = JsonSerializer.List(t).Serialize(value.Items);
            return json;
        }

        public CollectionSlice<T> Deserialize(Json.ImmutableJson json)
        {
            var result = new CollectionSlice<T>();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, CollectionSlice<T> value)
        {
            value.Total = JsonSerializer.Int.Deserialize(json["total"]);
            value.Items = JsonSerializer.List(t).Deserialize(json["items"]);
        }
    }

    public sealed class CurrencyJsonSerializer : Json.Serialization.IJsonSerializer<Currency>, Json.Serialization.IJsonKeySerializer<Currency>
    {
        public static readonly CurrencyJsonSerializer Instance = new CurrencyJsonSerializer();

        public Json.ImmutableJson Serialize(Currency value)
        {
            return SerializeKey(value);
        }

        public Currency Deserialize(Json.ImmutableJson json)
        {
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(Currency value)
        {
            switch (value)
            {
                case Currency.Eur: return "eur";
                case Currency.Usd: return "usd";
                case Currency.Rub: return "rub";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public Currency DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "eur": return Currency.Eur;
                case "usd": return Currency.Usd;
                case "rub": return Currency.Rub;
                default: throw new System.ArgumentException(nameof(jsonKey));
            }
        }
    }

    public sealed class PriceJsonSerializer : Json.Serialization.IJsonSerializer<Price>
    {
        public static readonly PriceJsonSerializer Instance = new PriceJsonSerializer();

        public Json.ImmutableJson Serialize(Price value)
        {
            var json = new Json.JsonObject();
            json["amount"] = JsonSerializer.Long.Serialize(value.Amount);
            json["currency"] = CurrencyJsonSerializer.Instance.Serialize(value.Currency);
            return json;
        }

        public Price Deserialize(Json.ImmutableJson json)
        {
            var result = new Price();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, Price value)
        {
            value.Amount = JsonSerializer.Long.Deserialize(json["amount"]);
            value.Currency = CurrencyJsonSerializer.Instance.Deserialize(json["currency"]);
        }
    }

    public sealed class GameOwnershipJsonSerializer : Json.Serialization.IJsonSerializer<GameOwnership>, Json.Serialization.IJsonKeySerializer<GameOwnership>
    {
        public static readonly GameOwnershipJsonSerializer Instance = new GameOwnershipJsonSerializer();

        public Json.ImmutableJson Serialize(GameOwnership value)
        {
            return SerializeKey(value);
        }

        public GameOwnership Deserialize(Json.ImmutableJson json)
        {
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(GameOwnership value)
        {
            switch (value)
            {
                case GameOwnership.None: return "none";
                case GameOwnership.Purchase: return "purchase";
                case GameOwnership.Grant: return "grant";
                case GameOwnership.Employee: return "employee";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public GameOwnership DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "none": return GameOwnership.None;
                case "purchase": return GameOwnership.Purchase;
                case "grant": return GameOwnership.Grant;
                case "employee": return GameOwnership.Employee;
                default: throw new System.ArgumentException(nameof(jsonKey));
            }
        }
    }

    public sealed class ClientStatusResponseJsonSerializer : Json.Serialization.IJsonSerializer<ClientStatusResponse>
    {
        public static readonly ClientStatusResponseJsonSerializer Instance = new ClientStatusResponseJsonSerializer();

        public Json.ImmutableJson Serialize(ClientStatusResponse value)
        {
            var json = new Json.JsonObject();
            json["logged_in"] = JsonSerializer.Bool.Serialize(value.LoggedIn);
            if (value.UserId.HasValue)
                json["user_id"] = JsonSerializer.Long.Serialize(value.UserId.Value);
            if (value.Email != null)
                json["email"] = JsonSerializer.String.Serialize(value.Email);
            if (value.Username != null)
                json["username"] = JsonSerializer.String.Serialize(value.Username);
            return json;
        }

        public ClientStatusResponse Deserialize(Json.ImmutableJson json)
        {
            var result = new ClientStatusResponse();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, ClientStatusResponse value)
        {
            value.LoggedIn = JsonSerializer.Bool.Deserialize(json["logged_in"]);
            Json.ImmutableJson jsonUserId;
            if (json.TryGetValue("user_id", out jsonUserId) && !jsonUserId.IsNull)
                value.UserId = JsonSerializer.Long.Deserialize(jsonUserId);
            Json.ImmutableJson jsonEmail;
            if (json.TryGetValue("email", out jsonEmail) && !jsonEmail.IsNull)
                value.Email = JsonSerializer.String.Deserialize(jsonEmail);
            Json.ImmutableJson jsonUsername;
            if (json.TryGetValue("username", out jsonUsername) && !jsonUsername.IsNull)
                value.Username = JsonSerializer.String.Deserialize(jsonUsername);
        }
    }

    public sealed class ClientRegisterRequestJsonSerializer : Json.Serialization.IJsonSerializer<ClientRegisterRequest>
    {
        public static readonly ClientRegisterRequestJsonSerializer Instance = new ClientRegisterRequestJsonSerializer();

        public Json.ImmutableJson Serialize(ClientRegisterRequest value)
        {
            if (value.Email == null)
                throw new System.InvalidOperationException("Required property Email is null");
            if (value.Username == null)
                throw new System.InvalidOperationException("Required property Username is null");
            if (value.Password == null)
                throw new System.InvalidOperationException("Required property Password is null");

            var json = new Json.JsonObject();
            json["email"] = JsonSerializer.String.Serialize(value.Email);
            json["username"] = JsonSerializer.String.Serialize(value.Username);
            json["password"] = JsonSerializer.String.Serialize(value.Password);
            if (value.CaptchaKey != null)
                json["captcha_key"] = JsonSerializer.String.Serialize(value.CaptchaKey);
            if (value.CaptchaAnswer != null)
                json["captcha_answer"] = JsonSerializer.String.Serialize(value.CaptchaAnswer);
            return json;
        }

        public ClientRegisterRequest Deserialize(Json.ImmutableJson json)
        {
            var result = new ClientRegisterRequest();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, ClientRegisterRequest value)
        {
            value.Email = JsonSerializer.String.Deserialize(json["email"]);
            value.Username = JsonSerializer.String.Deserialize(json["username"]);
            value.Password = JsonSerializer.String.Deserialize(json["password"]);
            Json.ImmutableJson jsonCaptchaKey;
            if (json.TryGetValue("captcha_key", out jsonCaptchaKey) && !jsonCaptchaKey.IsNull)
                value.CaptchaKey = JsonSerializer.String.Deserialize(jsonCaptchaKey);
            Json.ImmutableJson jsonCaptchaAnswer;
            if (json.TryGetValue("captcha_answer", out jsonCaptchaAnswer) && !jsonCaptchaAnswer.IsNull)
                value.CaptchaAnswer = JsonSerializer.String.Deserialize(jsonCaptchaAnswer);
        }
    }

    public sealed class ClientRegistrationErrorJsonSerializer : Json.Serialization.IJsonSerializer<ClientRegistrationError>, Json.Serialization.IJsonKeySerializer<ClientRegistrationError>
    {
        public static readonly ClientRegistrationErrorJsonSerializer Instance = new ClientRegistrationErrorJsonSerializer();

        public Json.ImmutableJson Serialize(ClientRegistrationError value)
        {
            return SerializeKey(value);
        }

        public ClientRegistrationError Deserialize(Json.ImmutableJson json)
        {
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(ClientRegistrationError value)
        {
            switch (value)
            {
                case ClientRegistrationError.Failure: return "failure";
                case ClientRegistrationError.InvalidEmail: return "invalid_email";
                case ClientRegistrationError.InvalidUsername: return "invalid_username";
                case ClientRegistrationError.InvalidPassword: return "invalid_password";
                case ClientRegistrationError.EmailAlreadyRegistered: return "email_already_registered";
                case ClientRegistrationError.UsernameAlreadyRegistered: return "username_already_registered";
                case ClientRegistrationError.AlreadyLoggedIn: return "already_logged_in";
                case ClientRegistrationError.InvalidCaptchaKey: return "invalid_captcha_key";
                case ClientRegistrationError.InvalidCaptchaResponse: return "invalid_captcha_response";
                case ClientRegistrationError.CaptchaExpired: return "captcha_expired";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public ClientRegistrationError DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "failure": return ClientRegistrationError.Failure;
                case "invalid_email": return ClientRegistrationError.InvalidEmail;
                case "invalid_username": return ClientRegistrationError.InvalidUsername;
                case "invalid_password": return ClientRegistrationError.InvalidPassword;
                case "email_already_registered": return ClientRegistrationError.EmailAlreadyRegistered;
                case "username_already_registered": return ClientRegistrationError.UsernameAlreadyRegistered;
                case "already_logged_in": return ClientRegistrationError.AlreadyLoggedIn;
                case "invalid_captcha_key": return ClientRegistrationError.InvalidCaptchaKey;
                case "invalid_captcha_response": return ClientRegistrationError.InvalidCaptchaResponse;
                case "captcha_expired": return ClientRegistrationError.CaptchaExpired;
                default: throw new System.ArgumentException(nameof(jsonKey));
            }
        }
    }

    public sealed class ClientRegisterResponseJsonSerializer : Json.Serialization.IJsonSerializer<ClientRegisterResponse>
    {
        public static readonly ClientRegisterResponseJsonSerializer Instance = new ClientRegisterResponseJsonSerializer();

        public Json.ImmutableJson Serialize(ClientRegisterResponse value)
        {
            var json = new Json.JsonObject();
            json["result"] = JsonSerializer.Bool.Serialize(value.Result);
            if (value.Error.HasValue)
                json["error"] = ClientRegistrationErrorJsonSerializer.Instance.Serialize(value.Error.Value);
            return json;
        }

        public ClientRegisterResponse Deserialize(Json.ImmutableJson json)
        {
            var result = new ClientRegisterResponse();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, ClientRegisterResponse value)
        {
            value.Result = JsonSerializer.Bool.Deserialize(json["result"]);
            Json.ImmutableJson jsonError;
            if (json.TryGetValue("error", out jsonError) && !jsonError.IsNull)
                value.Error = ClientRegistrationErrorJsonSerializer.Instance.Deserialize(jsonError);
        }
    }

    public sealed class ClientRegisterConfirmRequestJsonSerializer : Json.Serialization.IJsonSerializer<ClientRegisterConfirmRequest>
    {
        public static readonly ClientRegisterConfirmRequestJsonSerializer Instance = new ClientRegisterConfirmRequestJsonSerializer();

        public Json.ImmutableJson Serialize(ClientRegisterConfirmRequest value)
        {
            if (value.Username == null)
                throw new System.InvalidOperationException("Required property Username is null");
            if (value.SecurityCode == null)
                throw new System.InvalidOperationException("Required property SecurityCode is null");
            var json = new Json.JsonObject();
            json["username"] = JsonSerializer.String.Serialize(value.Username);
            json["security_code"] = JsonSerializer.String.Serialize(value.SecurityCode);
            return json;
        }

        public ClientRegisterConfirmRequest Deserialize(Json.ImmutableJson json)
        {
            var result = new ClientRegisterConfirmRequest();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, ClientRegisterConfirmRequest value)
        {
            value.Username = JsonSerializer.String.Deserialize(json["username"]);
            value.SecurityCode = JsonSerializer.String.Deserialize(json["security_code"]);
        }
    }

    public sealed class ClientResendRequestJsonSerializer : Json.Serialization.IJsonSerializer<ClientResendRequest>
    {
        public static readonly ClientResendRequestJsonSerializer Instance = new ClientResendRequestJsonSerializer();

        public Json.ImmutableJson Serialize(ClientResendRequest value)
        {
            if (value.Username == null)
                throw new System.InvalidOperationException("Required property Username is null");
            var json = new Json.JsonObject();
            json["username"] = JsonSerializer.String.Serialize(value.Username);
            return json;
        }

        public ClientResendRequest Deserialize(Json.ImmutableJson json)
        {
            var result = new ClientResendRequest();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, ClientResendRequest value)
        {
            value.Username = JsonSerializer.String.Deserialize(json["username"]);
        }
    }

    public sealed class ClientLoginRequestJsonSerializer : Json.Serialization.IJsonSerializer<ClientLoginRequest>
    {
        public static readonly ClientLoginRequestJsonSerializer Instance = new ClientLoginRequestJsonSerializer();

        public Json.ImmutableJson Serialize(ClientLoginRequest value)
        {
            if (value.Username == null)
                throw new System.InvalidOperationException("Required property Username is null");
            if (value.Password == null)
                throw new System.InvalidOperationException("Required property Password is null");
            var json = new Json.JsonObject();
            json["username"] = JsonSerializer.String.Serialize(value.Username);
            json["password"] = JsonSerializer.String.Serialize(value.Password);
            return json;
        }

        public ClientLoginRequest Deserialize(Json.ImmutableJson json)
        {
            var result = new ClientLoginRequest();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, ClientLoginRequest value)
        {
            value.Username = JsonSerializer.String.Deserialize(json["username"]);
            value.Password = JsonSerializer.String.Deserialize(json["password"]);
        }
    }

    public sealed class ClientLoginErrorJsonSerializer : Json.Serialization.IJsonSerializer<ClientLoginError>, Json.Serialization.IJsonKeySerializer<ClientLoginError>
    {
        public static readonly ClientLoginErrorJsonSerializer Instance = new ClientLoginErrorJsonSerializer();

        public Json.ImmutableJson Serialize(ClientLoginError value)
        {
            return SerializeKey(value);
        }

        public ClientLoginError Deserialize(Json.ImmutableJson json)
        {
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(ClientLoginError value)
        {
            switch (value)
            {
                case ClientLoginError.Failure: return "failure";
                case ClientLoginError.AlreadyLoggedIn: return "already_logged_in";
                case ClientLoginError.AccountNotExists: return "account_not_exists";
                case ClientLoginError.AccountNotActivated: return "account_not_activated";
                case ClientLoginError.AccountIsBlocked: return "account_is_blocked";
                case ClientLoginError.AccountIsDeleted: return "account_is_deleted";
                case ClientLoginError.InvalidPassword: return "invalid_password";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public ClientLoginError DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "failure": return ClientLoginError.Failure;
                case "already_logged_in": return ClientLoginError.AlreadyLoggedIn;
                case "account_not_exists": return ClientLoginError.AccountNotExists;
                case "account_not_activated": return ClientLoginError.AccountNotActivated;
                case "account_is_blocked": return ClientLoginError.AccountIsBlocked;
                case "account_is_deleted": return ClientLoginError.AccountIsDeleted;
                case "invalid_password": return ClientLoginError.InvalidPassword;
                default: throw new System.ArgumentException(nameof(jsonKey));
            }
        }
    }

    public sealed class ClientLoginResponseJsonSerializer : Json.Serialization.IJsonSerializer<ClientLoginResponse>
    {
        public static readonly ClientLoginResponseJsonSerializer Instance = new ClientLoginResponseJsonSerializer();

        public Json.ImmutableJson Serialize(ClientLoginResponse value)
        {
            var json = new Json.JsonObject();
            json["result"] = JsonSerializer.Bool.Serialize(value.Result);
            if (value.Error.HasValue)
                json["error"] = ClientLoginErrorJsonSerializer.Instance.Serialize(value.Error.Value);
            if (value.SessionId != null)
                json["session_id"] = JsonSerializer.String.Serialize(value.SessionId);
            return json;
        }

        public ClientLoginResponse Deserialize(Json.ImmutableJson json)
        {
            var result = new ClientLoginResponse();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, ClientLoginResponse value)
        {
            value.Result = JsonSerializer.Bool.Deserialize(json["result"]);
            Json.ImmutableJson jsonError;
            if (json.TryGetValue("error", out jsonError) && !jsonError.IsNull)
                value.Error = ClientLoginErrorJsonSerializer.Instance.Deserialize(jsonError);
            Json.ImmutableJson jsonSessionId;
            if (json.TryGetValue("session_id", out jsonSessionId) && !jsonSessionId.IsNull)
                value.SessionId = JsonSerializer.String.Deserialize(jsonSessionId);
        }
    }

    public sealed class ClientPasswordResetRequestJsonSerializer : Json.Serialization.IJsonSerializer<ClientPasswordResetRequest>
    {
        public static readonly ClientPasswordResetRequestJsonSerializer Instance = new ClientPasswordResetRequestJsonSerializer();

        public Json.ImmutableJson Serialize(ClientPasswordResetRequest value)
        {
            if (value.Username == null)
                throw new System.InvalidOperationException("Required property Username is null");
            if (value.NewPassword == null)
                throw new System.InvalidOperationException("Required property NewPassword is null");

            var json = new Json.JsonObject();
            json["username"] = JsonSerializer.String.Serialize(value.Username);
            json["new_password"] = JsonSerializer.String.Serialize(value.NewPassword);
            if (value.CaptchaKey != null)
                json["captcha_key"] = JsonSerializer.String.Serialize(value.CaptchaKey);
            if (value.CaptchaAnswer != null)
                json["captcha_answer"] = JsonSerializer.String.Serialize(value.CaptchaAnswer);
            return json;
        }

        public ClientPasswordResetRequest Deserialize(Json.ImmutableJson json)
        {
            var result = new ClientPasswordResetRequest();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, ClientPasswordResetRequest value)
        {
            value.Username = JsonSerializer.String.Deserialize(json["username"]);
            value.NewPassword = JsonSerializer.String.Deserialize(json["new_password"]);
            Json.ImmutableJson jsonCaptchaKey;
            if (json.TryGetValue("captcha_key", out jsonCaptchaKey) && !jsonCaptchaKey.IsNull)
                value.CaptchaKey = JsonSerializer.String.Deserialize(jsonCaptchaKey);
            Json.ImmutableJson jsonCaptchaAnswer;
            if (json.TryGetValue("captcha_answer", out jsonCaptchaAnswer) && !jsonCaptchaAnswer.IsNull)
                value.CaptchaAnswer = JsonSerializer.String.Deserialize(jsonCaptchaAnswer);
        }
    }

    public sealed class ClientPasswordResetErrorJsonSerializer : Json.Serialization.IJsonSerializer<ClientPasswordResetError>, Json.Serialization.IJsonKeySerializer<ClientPasswordResetError>
    {
        public static readonly ClientPasswordResetErrorJsonSerializer Instance = new ClientPasswordResetErrorJsonSerializer();

        public Json.ImmutableJson Serialize(ClientPasswordResetError value)
        {
            return SerializeKey(value);
        }

        public ClientPasswordResetError Deserialize(Json.ImmutableJson json)
        {
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(ClientPasswordResetError value)
        {
            switch (value)
            {
                case ClientPasswordResetError.Failure: return "failure";
                case ClientPasswordResetError.InvalidNewPassword: return "invalid_new_password";
                case ClientPasswordResetError.InvalidCaptchaKey: return "invalid_captcha_key";
                case ClientPasswordResetError.InvalidCaptchaResponse: return "invalid_captcha_response";
                case ClientPasswordResetError.CaptchaExpired: return "captcha_expired";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public ClientPasswordResetError DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "failure": return ClientPasswordResetError.Failure;
                case "invalid_new_password": return ClientPasswordResetError.InvalidNewPassword;
                case "invalid_captcha_key": return ClientPasswordResetError.InvalidCaptchaKey;
                case "invalid_captcha_response": return ClientPasswordResetError.InvalidCaptchaResponse;
                case "captcha_expired": return ClientPasswordResetError.CaptchaExpired;
                default: throw new System.ArgumentException(nameof(jsonKey));
            }
        }
    }

    public sealed class ClientPasswordResetResponseJsonSerializer : Json.Serialization.IJsonSerializer<ClientPasswordResetResponse>
    {
        public static readonly ClientPasswordResetResponseJsonSerializer Instance = new ClientPasswordResetResponseJsonSerializer();

        public Json.ImmutableJson Serialize(ClientPasswordResetResponse value)
        {
            var json = new Json.JsonObject();
            json["result"] = JsonSerializer.Bool.Serialize(value.Result);
            if (value.Error.HasValue)
                json["error"] = ClientPasswordResetErrorJsonSerializer.Instance.Serialize(value.Error.Value);
            return json;
        }

        public ClientPasswordResetResponse Deserialize(Json.ImmutableJson json)
        {
            var result = new ClientPasswordResetResponse();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, ClientPasswordResetResponse value)
        {
            value.Result = JsonSerializer.Bool.Deserialize(json["result"]);
            Json.ImmutableJson jsonError;
            if (json.TryGetValue("error", out jsonError) && !jsonError.IsNull)
                value.Error = ClientPasswordResetErrorJsonSerializer.Instance.Deserialize(jsonError);
        }
    }

    public sealed class ClientPasswordResetConfirmRequestJsonSerializer : Json.Serialization.IJsonSerializer<ClientPasswordResetConfirmRequest>
    {
        public static readonly ClientPasswordResetConfirmRequestJsonSerializer Instance = new ClientPasswordResetConfirmRequestJsonSerializer();

        public Json.ImmutableJson Serialize(ClientPasswordResetConfirmRequest value)
        {
            if (value.Username == null)
                throw new System.InvalidOperationException("Required property Username is null");
            if (value.SecurityCode == null)
                throw new System.InvalidOperationException("Required property SecurityCode is null");
            var json = new Json.JsonObject();
            json["username"] = JsonSerializer.String.Serialize(value.Username);
            json["security_code"] = JsonSerializer.String.Serialize(value.SecurityCode);
            return json;
        }

        public ClientPasswordResetConfirmRequest Deserialize(Json.ImmutableJson json)
        {
            var result = new ClientPasswordResetConfirmRequest();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, ClientPasswordResetConfirmRequest value)
        {
            value.Username = JsonSerializer.String.Deserialize(json["username"]);
            value.SecurityCode = JsonSerializer.String.Deserialize(json["security_code"]);
        }
    }

    public sealed class ClientPasswordChangeRequestJsonSerializer : Json.Serialization.IJsonSerializer<ClientPasswordChangeRequest>
    {
        public static readonly ClientPasswordChangeRequestJsonSerializer Instance = new ClientPasswordChangeRequestJsonSerializer();

        public Json.ImmutableJson Serialize(ClientPasswordChangeRequest value)
        {
            if (value.CurrentPassword == null)
                throw new System.InvalidOperationException("Required property CurrentPassword is null");
            if (value.NewPassword == null)
                throw new System.InvalidOperationException("Required property NewPassword is null");
            var json = new Json.JsonObject();
            json["current_password"] = JsonSerializer.String.Serialize(value.CurrentPassword);
            json["new_password"] = JsonSerializer.String.Serialize(value.NewPassword);
            return json;
        }

        public ClientPasswordChangeRequest Deserialize(Json.ImmutableJson json)
        {
            var result = new ClientPasswordChangeRequest();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, ClientPasswordChangeRequest value)
        {
            value.CurrentPassword = JsonSerializer.String.Deserialize(json["current_password"]);
            value.NewPassword = JsonSerializer.String.Deserialize(json["new_password"]);
        }
    }

    public sealed class ClientPasswordChangeErrorJsonSerializer : Json.Serialization.IJsonSerializer<ClientPasswordChangeError>, Json.Serialization.IJsonKeySerializer<ClientPasswordChangeError>
    {
        public static readonly ClientPasswordChangeErrorJsonSerializer Instance = new ClientPasswordChangeErrorJsonSerializer();

        public Json.ImmutableJson Serialize(ClientPasswordChangeError value)
        {
            return SerializeKey(value);
        }

        public ClientPasswordChangeError Deserialize(Json.ImmutableJson json)
        {
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(ClientPasswordChangeError value)
        {
            switch (value)
            {
                case ClientPasswordChangeError.Failure: return "failure";
                case ClientPasswordChangeError.InvalidCurrentPassword: return "invalid_current_password";
                case ClientPasswordChangeError.InvalidNewPassword: return "invalid_new_password";
                case ClientPasswordChangeError.NotLoggedIn: return "not_logged_in";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public ClientPasswordChangeError DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "failure": return ClientPasswordChangeError.Failure;
                case "invalid_current_password": return ClientPasswordChangeError.InvalidCurrentPassword;
                case "invalid_new_password": return ClientPasswordChangeError.InvalidNewPassword;
                case "not_logged_in": return ClientPasswordChangeError.NotLoggedIn;
                default: throw new System.ArgumentException(nameof(jsonKey));
            }
        }
    }

    public sealed class ClientPasswordChangeResponseJsonSerializer : Json.Serialization.IJsonSerializer<ClientPasswordChangeResponse>
    {
        public static readonly ClientPasswordChangeResponseJsonSerializer Instance = new ClientPasswordChangeResponseJsonSerializer();

        public Json.ImmutableJson Serialize(ClientPasswordChangeResponse value)
        {
            var json = new Json.JsonObject();
            json["result"] = JsonSerializer.Bool.Serialize(value.Result);
            if (value.Error.HasValue)
                json["error"] = ClientPasswordChangeErrorJsonSerializer.Instance.Serialize(value.Error.Value);
            return json;
        }

        public ClientPasswordChangeResponse Deserialize(Json.ImmutableJson json)
        {
            var result = new ClientPasswordChangeResponse();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, ClientPasswordChangeResponse value)
        {
            value.Result = JsonSerializer.Bool.Deserialize(json["result"]);
            Json.ImmutableJson jsonError;
            if (json.TryGetValue("error", out jsonError) && !jsonError.IsNull)
                value.Error = ClientPasswordChangeErrorJsonSerializer.Instance.Deserialize(jsonError);
        }
    }

    public sealed class PersonnelStatusResponseJsonSerializer : Json.Serialization.IJsonSerializer<PersonnelStatusResponse>
    {
        public static readonly PersonnelStatusResponseJsonSerializer Instance = new PersonnelStatusResponseJsonSerializer();

        public Json.ImmutableJson Serialize(PersonnelStatusResponse value)
        {
            var json = new Json.JsonObject();
            json["logged_in"] = JsonSerializer.Bool.Serialize(value.LoggedIn);
            if (value.UserId.HasValue)
                json["user_id"] = JsonSerializer.Long.Serialize(value.UserId.Value);
            if (value.Email != null)
                json["email"] = JsonSerializer.String.Serialize(value.Email);
            if (value.Username != null)
                json["username"] = JsonSerializer.String.Serialize(value.Username);
            return json;
        }

        public PersonnelStatusResponse Deserialize(Json.ImmutableJson json)
        {
            var result = new PersonnelStatusResponse();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, PersonnelStatusResponse value)
        {
            value.LoggedIn = JsonSerializer.Bool.Deserialize(json["logged_in"]);
            Json.ImmutableJson jsonUserId;
            if (json.TryGetValue("user_id", out jsonUserId) && !jsonUserId.IsNull)
                value.UserId = JsonSerializer.Long.Deserialize(jsonUserId);
            Json.ImmutableJson jsonEmail;
            if (json.TryGetValue("email", out jsonEmail) && !jsonEmail.IsNull)
                value.Email = JsonSerializer.String.Deserialize(jsonEmail);
            Json.ImmutableJson jsonUsername;
            if (json.TryGetValue("username", out jsonUsername) && !jsonUsername.IsNull)
                value.Username = JsonSerializer.String.Deserialize(jsonUsername);
        }
    }

    public sealed class PersonnelLoginRequestJsonSerializer : Json.Serialization.IJsonSerializer<PersonnelLoginRequest>
    {
        public static readonly PersonnelLoginRequestJsonSerializer Instance = new PersonnelLoginRequestJsonSerializer();

        public Json.ImmutableJson Serialize(PersonnelLoginRequest value)
        {
            if (value.Username == null)
                throw new System.InvalidOperationException("Required property Username is null");
            if (value.Password == null)
                throw new System.InvalidOperationException("Required property Password is null");
            var json = new Json.JsonObject();
            json["username"] = JsonSerializer.String.Serialize(value.Username);
            json["password"] = JsonSerializer.String.Serialize(value.Password);
            return json;
        }

        public PersonnelLoginRequest Deserialize(Json.ImmutableJson json)
        {
            var result = new PersonnelLoginRequest();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, PersonnelLoginRequest value)
        {
            value.Username = JsonSerializer.String.Deserialize(json["username"]);
            value.Password = JsonSerializer.String.Deserialize(json["password"]);
        }
    }

    public sealed class PersonnelLoginErrorJsonSerializer : Json.Serialization.IJsonSerializer<PersonnelLoginError>, Json.Serialization.IJsonKeySerializer<PersonnelLoginError>
    {
        public static readonly PersonnelLoginErrorJsonSerializer Instance = new PersonnelLoginErrorJsonSerializer();

        public Json.ImmutableJson Serialize(PersonnelLoginError value)
        {
            return SerializeKey(value);
        }

        public PersonnelLoginError Deserialize(Json.ImmutableJson json)
        {
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(PersonnelLoginError value)
        {
            switch (value)
            {
                case PersonnelLoginError.Failure: return "failure";
                case PersonnelLoginError.AlreadyLoggedIn: return "already_logged_in";
                case PersonnelLoginError.AccountNotExists: return "account_not_exists";
                case PersonnelLoginError.AccountIsBlocked: return "account_is_blocked";
                case PersonnelLoginError.AccountIsDeleted: return "account_is_deleted";
                case PersonnelLoginError.InvalidPassword: return "invalid_password";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public PersonnelLoginError DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "failure": return PersonnelLoginError.Failure;
                case "already_logged_in": return PersonnelLoginError.AlreadyLoggedIn;
                case "account_not_exists": return PersonnelLoginError.AccountNotExists;
                case "account_is_blocked": return PersonnelLoginError.AccountIsBlocked;
                case "account_is_deleted": return PersonnelLoginError.AccountIsDeleted;
                case "invalid_password": return PersonnelLoginError.InvalidPassword;
                default: throw new System.ArgumentException(nameof(jsonKey));
            }
        }
    }

    public sealed class PersonnelLoginResponseJsonSerializer : Json.Serialization.IJsonSerializer<PersonnelLoginResponse>
    {
        public static readonly PersonnelLoginResponseJsonSerializer Instance = new PersonnelLoginResponseJsonSerializer();

        public Json.ImmutableJson Serialize(PersonnelLoginResponse value)
        {
            var json = new Json.JsonObject();
            json["result"] = JsonSerializer.Bool.Serialize(value.Result);
            if (value.Error.HasValue)
                json["error"] = PersonnelLoginErrorJsonSerializer.Instance.Serialize(value.Error.Value);
            if (value.SessionId != null)
                json["session_id"] = JsonSerializer.String.Serialize(value.SessionId);
            if (value.UserId.HasValue)
                json["user_id"] = JsonSerializer.Long.Serialize(value.UserId.Value);
            if (value.Email != null)
                json["email"] = JsonSerializer.String.Serialize(value.Email);
            if (value.Username != null)
                json["username"] = JsonSerializer.String.Serialize(value.Username);
            return json;
        }

        public PersonnelLoginResponse Deserialize(Json.ImmutableJson json)
        {
            var result = new PersonnelLoginResponse();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, PersonnelLoginResponse value)
        {
            value.Result = JsonSerializer.Bool.Deserialize(json["result"]);
            Json.ImmutableJson jsonError;
            if (json.TryGetValue("error", out jsonError) && !jsonError.IsNull)
                value.Error = PersonnelLoginErrorJsonSerializer.Instance.Deserialize(jsonError);
            Json.ImmutableJson jsonSessionId;
            if (json.TryGetValue("session_id", out jsonSessionId) && !jsonSessionId.IsNull)
                value.SessionId = JsonSerializer.String.Deserialize(jsonSessionId);
            Json.ImmutableJson jsonUserId;
            if (json.TryGetValue("user_id", out jsonUserId) && !jsonUserId.IsNull)
                value.UserId = JsonSerializer.Long.Deserialize(jsonUserId);
            Json.ImmutableJson jsonEmail;
            if (json.TryGetValue("email", out jsonEmail) && !jsonEmail.IsNull)
                value.Email = JsonSerializer.String.Deserialize(jsonEmail);
            Json.ImmutableJson jsonUsername;
            if (json.TryGetValue("username", out jsonUsername) && !jsonUsername.IsNull)
                value.Username = JsonSerializer.String.Deserialize(jsonUsername);
        }
    }

    public sealed class CaptchaErrorJsonSerializer : Json.Serialization.IJsonSerializer<CaptchaError>, Json.Serialization.IJsonKeySerializer<CaptchaError>
    {
        public static readonly CaptchaErrorJsonSerializer Instance = new CaptchaErrorJsonSerializer();

        public Json.ImmutableJson Serialize(CaptchaError value)
        {
            return SerializeKey(value);
        }

        public CaptchaError Deserialize(Json.ImmutableJson json)
        {
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(CaptchaError value)
        {
            switch (value)
            {
                case CaptchaError.Failure: return "failure";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public CaptchaError DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "failure": return CaptchaError.Failure;
                default: throw new System.ArgumentException(nameof(jsonKey));
            }
        }
    }

    public sealed class CaptchaResponseJsonSerializer : Json.Serialization.IJsonSerializer<CaptchaResponse>
    {
        public static readonly CaptchaResponseJsonSerializer Instance = new CaptchaResponseJsonSerializer();

        public Json.ImmutableJson Serialize(CaptchaResponse value)
        {
            var json = new Json.JsonObject();
            json["result"] = JsonSerializer.Bool.Serialize(value.Result);
            if (value.Error.HasValue)
                json["error"] = CaptchaErrorJsonSerializer.Instance.Serialize(value.Error.Value);
            if (value.CaptchaKey != null)
                json["captcha_key"] = JsonSerializer.String.Serialize(value.CaptchaKey);
            if (value.Filename != null)
                json["filename"] = JsonSerializer.String.Serialize(value.Filename);
            return json;
        }

        public CaptchaResponse Deserialize(Json.ImmutableJson json)
        {
            var result = new CaptchaResponse();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, CaptchaResponse value)
        {
            value.Result = JsonSerializer.Bool.Deserialize(json["result"]);
            Json.ImmutableJson jsonError;
            if (json.TryGetValue("error", out jsonError) && !jsonError.IsNull)
                value.Error = CaptchaErrorJsonSerializer.Instance.Deserialize(jsonError);
            Json.ImmutableJson jsonCaptchaKey;
            if (json.TryGetValue("captcha_key", out jsonCaptchaKey) && !jsonCaptchaKey.IsNull)
                value.CaptchaKey = JsonSerializer.String.Deserialize(jsonCaptchaKey);
            Json.ImmutableJson jsonFilename;
            if (json.TryGetValue("filename", out jsonFilename) && !jsonFilename.IsNull)
                value.Filename = JsonSerializer.String.Deserialize(jsonFilename);
        }
    }

    public sealed class GameBranchItemJsonSerializer : Json.Serialization.IJsonSerializer<GameBranchItem>
    {
        public static readonly GameBranchItemJsonSerializer Instance = new GameBranchItemJsonSerializer();

        public Json.ImmutableJson Serialize(GameBranchItem value)
        {
            if (value.Name == null)
                throw new System.InvalidOperationException("Required property Name is null");

            if (value.ExePath == null)
                throw new System.InvalidOperationException("Required property ExePath is null");

            if (value.RootUrl == null)
                throw new System.InvalidOperationException("Required property RootUrl is null");

            var json = new Json.JsonObject();
            json["name"] = JsonSerializer.String.Serialize(value.Name);
            json["is_default"] = JsonSerializer.Bool.Serialize(value.IsDefault);
            if (value.Build != null)
                json["build"] = JsonSerializer.String.Serialize(value.Build);
            if (value.BuildTime != null)
                json["build_time"] = JsonSerializer.String.Serialize(value.BuildTime);
            if (value.BuildChangeList != null)
                json["build_change_list"] = JsonSerializer.String.Serialize(value.BuildChangeList);
            json["size"] = JsonSerializer.Long.Serialize(value.Size);
            json["compressed_size"] = JsonSerializer.Long.Serialize(value.CompressedSize);
            json["exe_path"] = JsonSerializer.String.Serialize(value.ExePath);
            if (value.LogPath != null)
                json["log_path"] = JsonSerializer.String.Serialize(value.LogPath);
            json["root_url"] = JsonSerializer.String.Serialize(value.RootUrl);
            if (value.GameEngine.HasValue)
                json["game_engine"] = GameEngineJsonSerializer.Instance.Serialize(value.GameEngine.Value);
            json["is_reportable"] = JsonSerializer.Bool.Serialize(value.IsReportable);
            return json;
        }

        public GameBranchItem Deserialize(Json.ImmutableJson json)
        {
            var result = new GameBranchItem();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, GameBranchItem value)
        {
            value.Name = JsonSerializer.String.Deserialize(json["name"]);
            value.IsDefault = JsonSerializer.Bool.Deserialize(json["is_default"]);
            Json.ImmutableJson jsonBuild;
            if (json.TryGetValue("build", out jsonBuild) && !jsonBuild.IsNull)
                value.Build = JsonSerializer.String.Deserialize(jsonBuild);
            Json.ImmutableJson jsonBuildTime;
            if (json.TryGetValue("build_time", out jsonBuildTime) && !jsonBuildTime.IsNull)
                value.BuildTime = JsonSerializer.String.Deserialize(jsonBuildTime);
            Json.ImmutableJson jsonBuildChangeList;
            if (json.TryGetValue("build_change_list", out jsonBuildChangeList) && !jsonBuildChangeList.IsNull)
                value.BuildChangeList = JsonSerializer.String.Deserialize(jsonBuildChangeList);
            value.Size = JsonSerializer.Long.Deserialize(json["size"]);
            value.CompressedSize = JsonSerializer.Long.Deserialize(json["compressed_size"]);
            value.ExePath = JsonSerializer.String.Deserialize(json["exe_path"]);
            Json.ImmutableJson jsonLogPath;
            if (json.TryGetValue("log_path", out jsonLogPath) && !jsonLogPath.IsNull)
                value.LogPath = JsonSerializer.String.Deserialize(jsonLogPath);
            value.RootUrl = JsonSerializer.String.Deserialize(json["root_url"]);
            Json.ImmutableJson jsonGameEngine;
            if (json.TryGetValue("game_engine", out jsonGameEngine) && !jsonGameEngine.IsNull)
                value.GameEngine = GameEngineJsonSerializer.Instance.Deserialize(jsonGameEngine);
            value.IsReportable = JsonSerializer.Bool.Deserialize(json["is_reportable"]);
        }
    }

    public sealed class GameBranchJsonSerializer : Json.Serialization.IJsonSerializer<GameBranch>
    {
        public static readonly GameBranchJsonSerializer Instance = new GameBranchJsonSerializer();

        public Json.ImmutableJson Serialize(GameBranch value)
        {
            if (value.GameId == null)
                throw new System.InvalidOperationException("Required property GameId is null");
            if (value.GameTitle == null)
                throw new System.InvalidOperationException("Required property GameTitle is null");
            if (value.Title == null)
                throw new System.InvalidOperationException("Required property Title is null");
            if (value.Description == null)
                throw new System.InvalidOperationException("Required property Description is null");
            if (value.Password == null)
                throw new System.InvalidOperationException("Required property Password is null");

            if (value.CreatedAt == null)
                throw new System.InvalidOperationException("Required property CreatedAt is null");
            if (value.UpdatedAt == null)
                throw new System.InvalidOperationException("Required property UpdatedAt is null");
            var json = new Json.JsonObject();
            json["id"] = JsonSerializer.Long.Serialize(value.Id);
            json["rev"] = JsonSerializer.Int.Serialize(value.Rev);
            json["game_id"] = JsonSerializer.String.Serialize(value.GameId);
            json["game_title"] = JsonSerializer.String.Serialize(value.GameTitle);
            json["title"] = JsonSerializer.String.Serialize(value.Title);
            json["description"] = JsonSerializer.String.Serialize(value.Description);
            json["password"] = JsonSerializer.String.Serialize(value.Password);
            if (value.BuildId.HasValue)
                json["build_id"] = JsonSerializer.Long.Serialize(value.BuildId.Value);
            if (value.BuildRev != null)
                json["build_rev"] = JsonSerializer.String.Serialize(value.BuildRev);
            if (value.BuildCommentary != null)
                json["build_commentary"] = JsonSerializer.String.Serialize(value.BuildCommentary);
            if (value.BuildChangeList != null)
                json["build_change_list"] = JsonSerializer.String.Serialize(value.BuildChangeList);
            if (value.BuildTotalSize.HasValue)
                json["build_total_size"] = JsonSerializer.Long.Serialize(value.BuildTotalSize.Value);
            if (value.BuildCompressedSize.HasValue)
                json["build_compressed_size"] = JsonSerializer.Long.Serialize(value.BuildCompressedSize.Value);
            if (value.BuildExePath != null)
                json["build_exe_path"] = JsonSerializer.String.Serialize(value.BuildExePath);
            if (value.BuildLogPath != null)
                json["build_log_path"] = JsonSerializer.String.Serialize(value.BuildLogPath);
            if (value.BuildCdnRootUrl != null)
                json["build_cdn_root_url"] = JsonSerializer.String.Serialize(value.BuildCdnRootUrl);
            if (value.BuildCreatedAt != null)
                json["build_created_at"] = JsonSerializer.String.Serialize(value.BuildCreatedAt);
            if (value.GameEngine.HasValue)
                json["game_engine"] = GameEngineJsonSerializer.Instance.Serialize(value.GameEngine.Value);
            json["is_reportable"] = JsonSerializer.Bool.Serialize(value.IsReportable);
            json["is_public"] = JsonSerializer.Bool.Serialize(value.IsPublic);
            json["is_default"] = JsonSerializer.Bool.Serialize(value.IsDefault);
            json["is_deleted"] = JsonSerializer.Bool.Serialize(value.IsDeleted);
            json["created_at"] = JsonSerializer.String.Serialize(value.CreatedAt);
            json["updated_at"] = JsonSerializer.String.Serialize(value.UpdatedAt);
            return json;
        }

        public GameBranch Deserialize(Json.ImmutableJson json)
        {
            var result = new GameBranch();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, GameBranch value)
        {
            value.Id = JsonSerializer.Long.Deserialize(json["id"]);
            value.Rev = JsonSerializer.Int.Deserialize(json["rev"]);
            value.GameId = JsonSerializer.String.Deserialize(json["game_id"]);
            value.GameTitle = JsonSerializer.String.Deserialize(json["game_title"]);
            value.Title = JsonSerializer.String.Deserialize(json["title"]);
            value.Description = JsonSerializer.String.Deserialize(json["description"]);
            value.Password = JsonSerializer.String.Deserialize(json["password"]);
            Json.ImmutableJson jsonBuildId;
            if (json.TryGetValue("build_id", out jsonBuildId) && !jsonBuildId.IsNull)
                value.BuildId = JsonSerializer.Long.Deserialize(jsonBuildId);
            Json.ImmutableJson jsonBuildRev;
            if (json.TryGetValue("build_rev", out jsonBuildRev) && !jsonBuildRev.IsNull)
                value.BuildRev = JsonSerializer.String.Deserialize(jsonBuildRev);
            Json.ImmutableJson jsonBuildCommentary;
            if (json.TryGetValue("build_commentary", out jsonBuildCommentary) && !jsonBuildCommentary.IsNull)
                value.BuildCommentary = JsonSerializer.String.Deserialize(jsonBuildCommentary);
            Json.ImmutableJson jsonBuildChangeList;
            if (json.TryGetValue("build_change_list", out jsonBuildChangeList) && !jsonBuildChangeList.IsNull)
                value.BuildChangeList = JsonSerializer.String.Deserialize(jsonBuildChangeList);
            Json.ImmutableJson jsonBuildTotalSize;
            if (json.TryGetValue("build_total_size", out jsonBuildTotalSize) && !jsonBuildTotalSize.IsNull)
                value.BuildTotalSize = JsonSerializer.Long.Deserialize(jsonBuildTotalSize);
            Json.ImmutableJson jsonBuildCompressedSize;
            if (json.TryGetValue("build_compressed_size", out jsonBuildCompressedSize) && !jsonBuildCompressedSize.IsNull)
                value.BuildCompressedSize = JsonSerializer.Long.Deserialize(jsonBuildCompressedSize);
            Json.ImmutableJson jsonBuildExePath;
            if (json.TryGetValue("build_exe_path", out jsonBuildExePath) && !jsonBuildExePath.IsNull)
                value.BuildExePath = JsonSerializer.String.Deserialize(jsonBuildExePath);
            Json.ImmutableJson jsonBuildLogPath;
            if (json.TryGetValue("build_log_path", out jsonBuildLogPath) && !jsonBuildLogPath.IsNull)
                value.BuildLogPath = JsonSerializer.String.Deserialize(jsonBuildLogPath);
            Json.ImmutableJson jsonBuildCdnRootUrl;
            if (json.TryGetValue("build_cdn_root_url", out jsonBuildCdnRootUrl) && !jsonBuildCdnRootUrl.IsNull)
                value.BuildCdnRootUrl = JsonSerializer.String.Deserialize(jsonBuildCdnRootUrl);
            Json.ImmutableJson jsonBuildCreatedAt;
            if (json.TryGetValue("build_created_at", out jsonBuildCreatedAt) && !jsonBuildCreatedAt.IsNull)
                value.BuildCreatedAt = JsonSerializer.String.Deserialize(jsonBuildCreatedAt);
            Json.ImmutableJson jsonGameEngine;
            if (json.TryGetValue("game_engine", out jsonGameEngine) && !jsonGameEngine.IsNull)
                value.GameEngine = GameEngineJsonSerializer.Instance.Deserialize(jsonGameEngine);
            value.IsReportable = JsonSerializer.Bool.Deserialize(json["is_reportable"]);
            value.IsPublic = JsonSerializer.Bool.Deserialize(json["is_public"]);
            value.IsDefault = JsonSerializer.Bool.Deserialize(json["is_default"]);
            value.IsDeleted = JsonSerializer.Bool.Deserialize(json["is_deleted"]);
            value.CreatedAt = JsonSerializer.String.Deserialize(json["created_at"]);
            value.UpdatedAt = JsonSerializer.String.Deserialize(json["updated_at"]);
        }
    }

    public sealed class GameItemJsonSerializer : Json.Serialization.IJsonSerializer<GameItem>
    {
        public static readonly GameItemJsonSerializer Instance = new GameItemJsonSerializer();

        public Json.ImmutableJson Serialize(GameItem value)
        {
            if (value.Guid == null)
                throw new System.InvalidOperationException("Required property Guid is null");
            if (value.Title == null)
                throw new System.InvalidOperationException("Required property Title is null");
            if (value.Description == null)
                throw new System.InvalidOperationException("Required property Description is null");

            if (value.Branches == null)
                throw new System.InvalidOperationException("Required property Branches is null");
            if (value.Price == null)
                throw new System.InvalidOperationException("Required property Price is null");

            var json = new Json.JsonObject();
            json["guid"] = JsonSerializer.String.Serialize(value.Guid);
            json["title"] = JsonSerializer.String.Serialize(value.Title);
            json["description"] = JsonSerializer.String.Serialize(value.Description);
            if (value.JiraKey != null)
                json["jira_key"] = JsonSerializer.String.Serialize(value.JiraKey);
            if (value.SeleneKey != null)
                json["selene_key"] = JsonSerializer.String.Serialize(value.SeleneKey);
            if (value.DiscordUrl != null)
                json["discord_url"] = JsonSerializer.String.Serialize(value.DiscordUrl);
            json["branches"] = JsonSerializer.List(GameBranchItemJsonSerializer.Instance).Serialize(value.Branches);
            json["price"] = PriceJsonSerializer.Instance.Serialize(value.Price);
            json["ownership"] = GameOwnershipJsonSerializer.Instance.Serialize(value.Ownership);
            if (value.OwnershipUntil != null)
                json["ownership_until"] = JsonSerializer.String.Serialize(value.OwnershipUntil);
            return json;
        }

        public GameItem Deserialize(Json.ImmutableJson json)
        {
            var result = new GameItem();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, GameItem value)
        {
            value.Guid = JsonSerializer.String.Deserialize(json["guid"]);
            value.Title = JsonSerializer.String.Deserialize(json["title"]);
            value.Description = JsonSerializer.String.Deserialize(json["description"]);
            Json.ImmutableJson jsonJiraKey;
            if (json.TryGetValue("jira_key", out jsonJiraKey) && !jsonJiraKey.IsNull)
                value.JiraKey = JsonSerializer.String.Deserialize(jsonJiraKey);
            Json.ImmutableJson jsonSeleneKey;
            if (json.TryGetValue("selene_key", out jsonSeleneKey) && !jsonSeleneKey.IsNull)
                value.SeleneKey = JsonSerializer.String.Deserialize(jsonSeleneKey);
            Json.ImmutableJson jsonDiscordUrl;
            if (json.TryGetValue("discord_url", out jsonDiscordUrl) && !jsonDiscordUrl.IsNull)
                value.DiscordUrl = JsonSerializer.String.Deserialize(jsonDiscordUrl);
            Json.ImmutableJson jsonBranches;
            if (json.TryGetValue("branches", out jsonBranches) && !jsonBranches.IsNull)
                value.Branches = JsonSerializer.List(GameBranchItemJsonSerializer.Instance).Deserialize(jsonBranches);
            value.Price = PriceJsonSerializer.Instance.Deserialize(json["price"]);
            value.Ownership = GameOwnershipJsonSerializer.Instance.Deserialize(json["ownership"]);
            Json.ImmutableJson jsonOwnershipUntil;
            if (json.TryGetValue("ownership_until", out jsonOwnershipUntil) && !jsonOwnershipUntil.IsNull)
                value.OwnershipUntil = JsonSerializer.String.Deserialize(jsonOwnershipUntil);
        }
    }

    public sealed class GameJsonSerializer : Json.Serialization.IJsonSerializer<Game>
    {
        public static readonly GameJsonSerializer Instance = new GameJsonSerializer();

        public Json.ImmutableJson Serialize(Game value)
        {
            if (value.Id == null)
                throw new System.InvalidOperationException("Required property Id is null");

            if (value.Title == null)
                throw new System.InvalidOperationException("Required property Title is null");
            if (value.Description == null)
                throw new System.InvalidOperationException("Required property Description is null");

            if (value.Currency == null)
                throw new System.InvalidOperationException("Required property Currency is null");

            if (value.CreatedAt == null)
                throw new System.InvalidOperationException("Required property CreatedAt is null");
            if (value.UpdatedAt == null)
                throw new System.InvalidOperationException("Required property UpdatedAt is null");
            var json = new Json.JsonObject();
            json["id"] = JsonSerializer.String.Serialize(value.Id);
            json["rev"] = JsonSerializer.Int.Serialize(value.Rev);
            json["title"] = JsonSerializer.String.Serialize(value.Title);
            json["description"] = JsonSerializer.String.Serialize(value.Description);
            if (value.JiraKey != null)
                json["jira_key"] = JsonSerializer.String.Serialize(value.JiraKey);
            if (value.SeleneKey != null)
                json["selene_key"] = JsonSerializer.String.Serialize(value.SeleneKey);
            if (value.CiUrl != null)
                json["ci_url"] = JsonSerializer.String.Serialize(value.CiUrl);
            if (value.DiscordUrl != null)
                json["discord_url"] = JsonSerializer.String.Serialize(value.DiscordUrl);
            json["price"] = JsonSerializer.Double.Serialize(value.Price);
            json["currency"] = JsonSerializer.String.Serialize(value.Currency);
            json["build_lifetime"] = JsonSerializer.Int.Serialize(value.BuildLifetime);
            json["is_published"] = JsonSerializer.Bool.Serialize(value.IsPublished);
            json["is_disabled"] = JsonSerializer.Bool.Serialize(value.IsDisabled);
            json["is_deleted"] = JsonSerializer.Bool.Serialize(value.IsDeleted);
            json["created_at"] = JsonSerializer.String.Serialize(value.CreatedAt);
            json["updated_at"] = JsonSerializer.String.Serialize(value.UpdatedAt);
            return json;
        }

        public Game Deserialize(Json.ImmutableJson json)
        {
            var result = new Game();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, Game value)
        {
            value.Id = JsonSerializer.String.Deserialize(json["id"]);
            value.Rev = JsonSerializer.Int.Deserialize(json["rev"]);
            value.Title = JsonSerializer.String.Deserialize(json["title"]);
            value.Description = JsonSerializer.String.Deserialize(json["description"]);
            Json.ImmutableJson jsonJiraKey;
            if (json.TryGetValue("jira_key", out jsonJiraKey) && !jsonJiraKey.IsNull)
                value.JiraKey = JsonSerializer.String.Deserialize(jsonJiraKey);
            Json.ImmutableJson jsonSeleneKey;
            if (json.TryGetValue("selene_key", out jsonSeleneKey) && !jsonSeleneKey.IsNull)
                value.SeleneKey = JsonSerializer.String.Deserialize(jsonSeleneKey);
            Json.ImmutableJson jsonCiUrl;
            if (json.TryGetValue("ci_url", out jsonCiUrl) && !jsonCiUrl.IsNull)
                value.CiUrl = JsonSerializer.String.Deserialize(jsonCiUrl);
            Json.ImmutableJson jsonDiscordUrl;
            if (json.TryGetValue("discord_url", out jsonDiscordUrl) && !jsonDiscordUrl.IsNull)
                value.DiscordUrl = JsonSerializer.String.Deserialize(jsonDiscordUrl);
            value.Price = JsonSerializer.Double.Deserialize(json["price"]);
            value.Currency = JsonSerializer.String.Deserialize(json["currency"]);
            value.BuildLifetime = JsonSerializer.Int.Deserialize(json["build_lifetime"]);
            value.IsPublished = JsonSerializer.Bool.Deserialize(json["is_published"]);
            value.IsDisabled = JsonSerializer.Bool.Deserialize(json["is_disabled"]);
            value.IsDeleted = JsonSerializer.Bool.Deserialize(json["is_deleted"]);
            value.CreatedAt = JsonSerializer.String.Deserialize(json["created_at"]);
            value.UpdatedAt = JsonSerializer.String.Deserialize(json["updated_at"]);
        }
    }

    public sealed class GameFileJsonSerializer : Json.Serialization.IJsonSerializer<GameFile>
    {
        public static readonly GameFileJsonSerializer Instance = new GameFileJsonSerializer();

        public Json.ImmutableJson Serialize(GameFile value)
        {
            if (value.RelativePath == null)
                throw new System.InvalidOperationException("Required property RelativePath is null");
            if (value.RelativeCompressedPath == null)
                throw new System.InvalidOperationException("Required property RelativeCompressedPath is null");
            if (value.Md5 == null)
                throw new System.InvalidOperationException("Required property Md5 is null");

            var json = new Json.JsonObject();
            json["relative_path"] = JsonSerializer.String.Serialize(value.RelativePath);
            json["relative_compressed_path"] = JsonSerializer.String.Serialize(value.RelativeCompressedPath);
            json["md5"] = JsonSerializer.String.Serialize(value.Md5);
            json["size"] = JsonSerializer.Long.Serialize(value.Size);
            json["compressed_size"] = JsonSerializer.Long.Serialize(value.CompressedSize);
            return json;
        }

        public GameFile Deserialize(Json.ImmutableJson json)
        {
            var result = new GameFile();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, GameFile value)
        {
            value.RelativePath = JsonSerializer.String.Deserialize(json["relative_path"]);
            value.RelativeCompressedPath = JsonSerializer.String.Deserialize(json["relative_compressed_path"]);
            value.Md5 = JsonSerializer.String.Deserialize(json["md5"]);
            value.Size = JsonSerializer.Long.Deserialize(json["size"]);
            value.CompressedSize = JsonSerializer.Long.Deserialize(json["compressed_size"]);
        }
    }

    public sealed class GameItemListJsonSerializer : Json.Serialization.IJsonSerializer<GameItemList>
    {
        public static readonly GameItemListJsonSerializer Instance = new GameItemListJsonSerializer();

        public Json.ImmutableJson Serialize(GameItemList value)
        {
            if (value.Games == null)
                throw new System.InvalidOperationException("Required property Games is null");
            var json = new Json.JsonObject();
            json["games"] = JsonSerializer.List(GameItemJsonSerializer.Instance).Serialize(value.Games);
            return json;
        }

        public GameItemList Deserialize(Json.ImmutableJson json)
        {
            var result = new GameItemList();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, GameItemList value)
        {
            Json.ImmutableJson jsonGames;
            if (json.TryGetValue("games", out jsonGames) && !jsonGames.IsNull)
                value.Games = JsonSerializer.List(GameItemJsonSerializer.Instance).Deserialize(jsonGames);
        }
    }

    public sealed class GameManifestJsonSerializer : Json.Serialization.IJsonSerializer<GameManifest>
    {
        public static readonly GameManifestJsonSerializer Instance = new GameManifestJsonSerializer();

        public Json.ImmutableJson Serialize(GameManifest value)
        {
            if (value.Files == null)
                throw new System.InvalidOperationException("Required property Files is null");
            var json = new Json.JsonObject();
            json["files"] = JsonSerializer.List(GameFileJsonSerializer.Instance).Serialize(value.Files);
            return json;
        }

        public GameManifest Deserialize(Json.ImmutableJson json)
        {
            var result = new GameManifest();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, GameManifest value)
        {
            Json.ImmutableJson jsonFiles;
            if (json.TryGetValue("files", out jsonFiles) && !jsonFiles.IsNull)
                value.Files = JsonSerializer.List(GameFileJsonSerializer.Instance).Deserialize(jsonFiles);
        }
    }

    public sealed class BranchUnlockRequestJsonSerializer : Json.Serialization.IJsonSerializer<BranchUnlockRequest>
    {
        public static readonly BranchUnlockRequestJsonSerializer Instance = new BranchUnlockRequestJsonSerializer();

        public Json.ImmutableJson Serialize(BranchUnlockRequest value)
        {
            if (value.Password == null)
                throw new System.InvalidOperationException("Required property Password is null");
            var json = new Json.JsonObject();
            json["password"] = JsonSerializer.String.Serialize(value.Password);
            return json;
        }

        public BranchUnlockRequest Deserialize(Json.ImmutableJson json)
        {
            var result = new BranchUnlockRequest();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, BranchUnlockRequest value)
        {
            value.Password = JsonSerializer.String.Deserialize(json["password"]);
        }
    }

    public sealed class GameOrderByJsonSerializer : Json.Serialization.IJsonSerializer<GameOrderBy>, Json.Serialization.IJsonKeySerializer<GameOrderBy>
    {
        public static readonly GameOrderByJsonSerializer Instance = new GameOrderByJsonSerializer();

        public Json.ImmutableJson Serialize(GameOrderBy value)
        {
            return SerializeKey(value);
        }

        public GameOrderBy Deserialize(Json.ImmutableJson json)
        {
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(GameOrderBy value)
        {
            switch (value)
            {
                case GameOrderBy.Id: return "id";
                case GameOrderBy.Title: return "title";
                case GameOrderBy.Description: return "description";
                case GameOrderBy.Price: return "price";
                case GameOrderBy.Currency: return "currency";
                case GameOrderBy.IsPublished: return "is_published";
                case GameOrderBy.IsDisabled: return "is_disabled";
                case GameOrderBy.IsDeleted: return "is_deleted";
                case GameOrderBy.CreatedAt: return "created_at";
                case GameOrderBy.UpdatedAt: return "updated_at";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public GameOrderBy DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "id": return GameOrderBy.Id;
                case "title": return GameOrderBy.Title;
                case "description": return GameOrderBy.Description;
                case "price": return GameOrderBy.Price;
                case "currency": return GameOrderBy.Currency;
                case "is_published": return GameOrderBy.IsPublished;
                case "is_disabled": return GameOrderBy.IsDisabled;
                case "is_deleted": return GameOrderBy.IsDeleted;
                case "created_at": return GameOrderBy.CreatedAt;
                case "updated_at": return GameOrderBy.UpdatedAt;
                default: throw new System.ArgumentException(nameof(jsonKey));
            }
        }
    }

    public sealed class GameCreateRequestJsonSerializer : Json.Serialization.IJsonSerializer<GameCreateRequest>
    {
        public static readonly GameCreateRequestJsonSerializer Instance = new GameCreateRequestJsonSerializer();

        public Json.ImmutableJson Serialize(GameCreateRequest value)
        {
            if (value.Id == null)
                throw new System.InvalidOperationException("Required property Id is null");
            if (value.Title == null)
                throw new System.InvalidOperationException("Required property Title is null");

            if (value.Currency == null)
                throw new System.InvalidOperationException("Required property Currency is null");
            var json = new Json.JsonObject();
            json["id"] = JsonSerializer.String.Serialize(value.Id);
            json["title"] = JsonSerializer.String.Serialize(value.Title);
            json["price"] = JsonSerializer.Double.Serialize(value.Price);
            json["currency"] = JsonSerializer.String.Serialize(value.Currency);
            return json;
        }

        public GameCreateRequest Deserialize(Json.ImmutableJson json)
        {
            var result = new GameCreateRequest();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, GameCreateRequest value)
        {
            value.Id = JsonSerializer.String.Deserialize(json["id"]);
            value.Title = JsonSerializer.String.Deserialize(json["title"]);
            value.Price = JsonSerializer.Double.Deserialize(json["price"]);
            value.Currency = JsonSerializer.String.Deserialize(json["currency"]);
        }
    }

    public sealed class GameCreateErrorJsonSerializer : Json.Serialization.IJsonSerializer<GameCreateError>, Json.Serialization.IJsonKeySerializer<GameCreateError>
    {
        public static readonly GameCreateErrorJsonSerializer Instance = new GameCreateErrorJsonSerializer();

        public Json.ImmutableJson Serialize(GameCreateError value)
        {
            return SerializeKey(value);
        }

        public GameCreateError Deserialize(Json.ImmutableJson json)
        {
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(GameCreateError value)
        {
            switch (value)
            {
                case GameCreateError.Failure: return "failure";
                case GameCreateError.GameIdAlreadyExists: return "game_id_already_exists";
                case GameCreateError.GameTitleAlreadyExists: return "game_title_already_exists";
                case GameCreateError.InvalidPrice: return "invalid_price";
                case GameCreateError.InvalidCurrency: return "invalid_currency";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public GameCreateError DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "failure": return GameCreateError.Failure;
                case "game_id_already_exists": return GameCreateError.GameIdAlreadyExists;
                case "game_title_already_exists": return GameCreateError.GameTitleAlreadyExists;
                case "invalid_price": return GameCreateError.InvalidPrice;
                case "invalid_currency": return GameCreateError.InvalidCurrency;
                default: throw new System.ArgumentException(nameof(jsonKey));
            }
        }
    }

    public sealed class GameCreateResponseJsonSerializer : Json.Serialization.IJsonSerializer<GameCreateResponse>
    {
        public static readonly GameCreateResponseJsonSerializer Instance = new GameCreateResponseJsonSerializer();

        public Json.ImmutableJson Serialize(GameCreateResponse value)
        {
            var json = new Json.JsonObject();
            json["result"] = JsonSerializer.Bool.Serialize(value.Result);
            if (value.Error.HasValue)
                json["error"] = GameCreateErrorJsonSerializer.Instance.Serialize(value.Error.Value);
            if (value.Game != null)
                json["game"] = GameJsonSerializer.Instance.Serialize(value.Game);
            return json;
        }

        public GameCreateResponse Deserialize(Json.ImmutableJson json)
        {
            var result = new GameCreateResponse();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, GameCreateResponse value)
        {
            value.Result = JsonSerializer.Bool.Deserialize(json["result"]);
            Json.ImmutableJson jsonError;
            if (json.TryGetValue("error", out jsonError) && !jsonError.IsNull)
                value.Error = GameCreateErrorJsonSerializer.Instance.Deserialize(jsonError);
            Json.ImmutableJson jsonGame;
            if (json.TryGetValue("game", out jsonGame) && !jsonGame.IsNull)
                value.Game = GameJsonSerializer.Instance.Deserialize(jsonGame);
        }
    }

    public sealed class GameUpdateRequestJsonSerializer : Json.Serialization.IJsonSerializer<GameUpdateRequest>
    {
        public static readonly GameUpdateRequestJsonSerializer Instance = new GameUpdateRequestJsonSerializer();

        public Json.ImmutableJson Serialize(GameUpdateRequest value)
        {
            var json = new Json.JsonObject();
            if (value.Title != null)
                json["title"] = JsonSerializer.String.Serialize(value.Title);
            if (value.Description != null)
                json["description"] = JsonSerializer.String.Serialize(value.Description);
            if (value.JiraKey != null)
                json["jira_key"] = JsonSerializer.String.Serialize(value.JiraKey);
            if (value.SeleneKey != null)
                json["selene_key"] = JsonSerializer.String.Serialize(value.SeleneKey);
            if (value.CiUrl != null)
                json["ci_url"] = JsonSerializer.String.Serialize(value.CiUrl);
            if (value.DiscordUrl != null)
                json["discord_url"] = JsonSerializer.String.Serialize(value.DiscordUrl);
            if (value.Price.HasValue)
                json["price"] = JsonSerializer.Double.Serialize(value.Price.Value);
            if (value.Currency != null)
                json["currency"] = JsonSerializer.String.Serialize(value.Currency);
            if (value.BuildLifetime.HasValue)
                json["build_lifetime"] = JsonSerializer.Int.Serialize(value.BuildLifetime.Value);
            if (value.IsPublished.HasValue)
                json["is_published"] = JsonSerializer.Bool.Serialize(value.IsPublished.Value);
            if (value.IsDisabled.HasValue)
                json["is_disabled"] = JsonSerializer.Bool.Serialize(value.IsDisabled.Value);
            if (value.IsDeleted.HasValue)
                json["is_deleted"] = JsonSerializer.Bool.Serialize(value.IsDeleted.Value);
            return json;
        }

        public GameUpdateRequest Deserialize(Json.ImmutableJson json)
        {
            var result = new GameUpdateRequest();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, GameUpdateRequest value)
        {
            Json.ImmutableJson jsonTitle;
            if (json.TryGetValue("title", out jsonTitle) && !jsonTitle.IsNull)
                value.Title = JsonSerializer.String.Deserialize(jsonTitle);
            Json.ImmutableJson jsonDescription;
            if (json.TryGetValue("description", out jsonDescription) && !jsonDescription.IsNull)
                value.Description = JsonSerializer.String.Deserialize(jsonDescription);
            Json.ImmutableJson jsonJiraKey;
            if (json.TryGetValue("jira_key", out jsonJiraKey) && !jsonJiraKey.IsNull)
                value.JiraKey = JsonSerializer.String.Deserialize(jsonJiraKey);
            Json.ImmutableJson jsonSeleneKey;
            if (json.TryGetValue("selene_key", out jsonSeleneKey) && !jsonSeleneKey.IsNull)
                value.SeleneKey = JsonSerializer.String.Deserialize(jsonSeleneKey);
            Json.ImmutableJson jsonCiUrl;
            if (json.TryGetValue("ci_url", out jsonCiUrl) && !jsonCiUrl.IsNull)
                value.CiUrl = JsonSerializer.String.Deserialize(jsonCiUrl);
            Json.ImmutableJson jsonDiscordUrl;
            if (json.TryGetValue("discord_url", out jsonDiscordUrl) && !jsonDiscordUrl.IsNull)
                value.DiscordUrl = JsonSerializer.String.Deserialize(jsonDiscordUrl);
            Json.ImmutableJson jsonPrice;
            if (json.TryGetValue("price", out jsonPrice) && !jsonPrice.IsNull)
                value.Price = JsonSerializer.Double.Deserialize(jsonPrice);
            Json.ImmutableJson jsonCurrency;
            if (json.TryGetValue("currency", out jsonCurrency) && !jsonCurrency.IsNull)
                value.Currency = JsonSerializer.String.Deserialize(jsonCurrency);
            Json.ImmutableJson jsonBuildLifetime;
            if (json.TryGetValue("build_lifetime", out jsonBuildLifetime) && !jsonBuildLifetime.IsNull)
                value.BuildLifetime = JsonSerializer.Int.Deserialize(jsonBuildLifetime);
            Json.ImmutableJson jsonIsPublished;
            if (json.TryGetValue("is_published", out jsonIsPublished) && !jsonIsPublished.IsNull)
                value.IsPublished = JsonSerializer.Bool.Deserialize(jsonIsPublished);
            Json.ImmutableJson jsonIsDisabled;
            if (json.TryGetValue("is_disabled", out jsonIsDisabled) && !jsonIsDisabled.IsNull)
                value.IsDisabled = JsonSerializer.Bool.Deserialize(jsonIsDisabled);
            Json.ImmutableJson jsonIsDeleted;
            if (json.TryGetValue("is_deleted", out jsonIsDeleted) && !jsonIsDeleted.IsNull)
                value.IsDeleted = JsonSerializer.Bool.Deserialize(jsonIsDeleted);
        }
    }

    public sealed class GameUpdateErrorJsonSerializer : Json.Serialization.IJsonSerializer<GameUpdateError>, Json.Serialization.IJsonKeySerializer<GameUpdateError>
    {
        public static readonly GameUpdateErrorJsonSerializer Instance = new GameUpdateErrorJsonSerializer();

        public Json.ImmutableJson Serialize(GameUpdateError value)
        {
            return SerializeKey(value);
        }

        public GameUpdateError Deserialize(Json.ImmutableJson json)
        {
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(GameUpdateError value)
        {
            switch (value)
            {
                case GameUpdateError.Failure: return "failure";
                case GameUpdateError.RevMismatch: return "rev_mismatch";
                case GameUpdateError.NothingToUpdate: return "nothing_to_update";
                case GameUpdateError.GameTitleAlreadyExists: return "game_title_already_exists";
                case GameUpdateError.InvalidGameTitle: return "invalid_game_title";
                case GameUpdateError.InvalidJiraKey: return "invalid_jira_key";
                case GameUpdateError.InvalidSeleneKey: return "invalid_selene_key";
                case GameUpdateError.InvalidCiUrl: return "invalid_ci_url";
                case GameUpdateError.InvalidDiscordUrl: return "invalid_discord_url";
                case GameUpdateError.InvalidPrice: return "invalid_price";
                case GameUpdateError.InvalidCurrency: return "invalid_currency";
                case GameUpdateError.InvalidBuildLifetime: return "invalid_build_lifetime";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public GameUpdateError DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "failure": return GameUpdateError.Failure;
                case "rev_mismatch": return GameUpdateError.RevMismatch;
                case "nothing_to_update": return GameUpdateError.NothingToUpdate;
                case "game_title_already_exists": return GameUpdateError.GameTitleAlreadyExists;
                case "invalid_game_title": return GameUpdateError.InvalidGameTitle;
                case "invalid_jira_key": return GameUpdateError.InvalidJiraKey;
                case "invalid_selene_key": return GameUpdateError.InvalidSeleneKey;
                case "invalid_ci_url": return GameUpdateError.InvalidCiUrl;
                case "invalid_discord_url": return GameUpdateError.InvalidDiscordUrl;
                case "invalid_price": return GameUpdateError.InvalidPrice;
                case "invalid_currency": return GameUpdateError.InvalidCurrency;
                case "invalid_build_lifetime": return GameUpdateError.InvalidBuildLifetime;
                default: throw new System.ArgumentException(nameof(jsonKey));
            }
        }
    }

    public sealed class GameUpdateResponseJsonSerializer : Json.Serialization.IJsonSerializer<GameUpdateResponse>
    {
        public static readonly GameUpdateResponseJsonSerializer Instance = new GameUpdateResponseJsonSerializer();

        public Json.ImmutableJson Serialize(GameUpdateResponse value)
        {
            var json = new Json.JsonObject();
            json["result"] = JsonSerializer.Bool.Serialize(value.Result);
            if (value.Error.HasValue)
                json["error"] = GameUpdateErrorJsonSerializer.Instance.Serialize(value.Error.Value);
            if (value.Game != null)
                json["game"] = GameJsonSerializer.Instance.Serialize(value.Game);
            return json;
        }

        public GameUpdateResponse Deserialize(Json.ImmutableJson json)
        {
            var result = new GameUpdateResponse();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, GameUpdateResponse value)
        {
            value.Result = JsonSerializer.Bool.Deserialize(json["result"]);
            Json.ImmutableJson jsonError;
            if (json.TryGetValue("error", out jsonError) && !jsonError.IsNull)
                value.Error = GameUpdateErrorJsonSerializer.Instance.Deserialize(jsonError);
            Json.ImmutableJson jsonGame;
            if (json.TryGetValue("game", out jsonGame) && !jsonGame.IsNull)
                value.Game = GameJsonSerializer.Instance.Deserialize(jsonGame);
        }
    }

    public sealed class GameBranchOrderByJsonSerializer : Json.Serialization.IJsonSerializer<GameBranchOrderBy>, Json.Serialization.IJsonKeySerializer<GameBranchOrderBy>
    {
        public static readonly GameBranchOrderByJsonSerializer Instance = new GameBranchOrderByJsonSerializer();

        public Json.ImmutableJson Serialize(GameBranchOrderBy value)
        {
            return SerializeKey(value);
        }

        public GameBranchOrderBy Deserialize(Json.ImmutableJson json)
        {
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(GameBranchOrderBy value)
        {
            switch (value)
            {
                case GameBranchOrderBy.Id: return "id";
                case GameBranchOrderBy.Title: return "title";
                case GameBranchOrderBy.BuildId: return "build_id";
                case GameBranchOrderBy.BuildRev: return "build_rev";
                case GameBranchOrderBy.BuildTotalSize: return "build_total_size";
                case GameBranchOrderBy.BuildCompressedSize: return "build_compressed_size";
                case GameBranchOrderBy.BuildCreatedAt: return "build_created_at";
                case GameBranchOrderBy.IsPublic: return "is_public";
                case GameBranchOrderBy.IsDefault: return "is_default";
                case GameBranchOrderBy.IsDeleted: return "is_deleted";
                case GameBranchOrderBy.CreatedAt: return "created_at";
                case GameBranchOrderBy.UpdatedAt: return "updated_at";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public GameBranchOrderBy DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "id": return GameBranchOrderBy.Id;
                case "title": return GameBranchOrderBy.Title;
                case "build_id": return GameBranchOrderBy.BuildId;
                case "build_rev": return GameBranchOrderBy.BuildRev;
                case "build_total_size": return GameBranchOrderBy.BuildTotalSize;
                case "build_compressed_size": return GameBranchOrderBy.BuildCompressedSize;
                case "build_created_at": return GameBranchOrderBy.BuildCreatedAt;
                case "is_public": return GameBranchOrderBy.IsPublic;
                case "is_default": return GameBranchOrderBy.IsDefault;
                case "is_deleted": return GameBranchOrderBy.IsDeleted;
                case "created_at": return GameBranchOrderBy.CreatedAt;
                case "updated_at": return GameBranchOrderBy.UpdatedAt;
                default: throw new System.ArgumentException(nameof(jsonKey));
            }
        }
    }

    public sealed class GameBranchCreateRequestJsonSerializer : Json.Serialization.IJsonSerializer<GameBranchCreateRequest>
    {
        public static readonly GameBranchCreateRequestJsonSerializer Instance = new GameBranchCreateRequestJsonSerializer();

        public Json.ImmutableJson Serialize(GameBranchCreateRequest value)
        {
            if (value.Title == null)
                throw new System.InvalidOperationException("Required property Title is null");
            if (value.Description == null)
                throw new System.InvalidOperationException("Required property Description is null");
            if (value.Password == null)
                throw new System.InvalidOperationException("Required property Password is null");

            var json = new Json.JsonObject();
            json["title"] = JsonSerializer.String.Serialize(value.Title);
            json["description"] = JsonSerializer.String.Serialize(value.Description);
            json["password"] = JsonSerializer.String.Serialize(value.Password);
            json["game_engine"] = GameEngineJsonSerializer.Instance.Serialize(value.GameEngine);
            return json;
        }

        public GameBranchCreateRequest Deserialize(Json.ImmutableJson json)
        {
            var result = new GameBranchCreateRequest();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, GameBranchCreateRequest value)
        {
            value.Title = JsonSerializer.String.Deserialize(json["title"]);
            value.Description = JsonSerializer.String.Deserialize(json["description"]);
            value.Password = JsonSerializer.String.Deserialize(json["password"]);
            value.GameEngine = GameEngineJsonSerializer.Instance.Deserialize(json["game_engine"]);
        }
    }

    public sealed class GameBranchCreateErrorJsonSerializer : Json.Serialization.IJsonSerializer<GameBranchCreateError>, Json.Serialization.IJsonKeySerializer<GameBranchCreateError>
    {
        public static readonly GameBranchCreateErrorJsonSerializer Instance = new GameBranchCreateErrorJsonSerializer();

        public Json.ImmutableJson Serialize(GameBranchCreateError value)
        {
            return SerializeKey(value);
        }

        public GameBranchCreateError Deserialize(Json.ImmutableJson json)
        {
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(GameBranchCreateError value)
        {
            switch (value)
            {
                case GameBranchCreateError.Failure: return "failure";
                case GameBranchCreateError.BranchTitleAlreadyExists: return "branch_title_already_exists";
                case GameBranchCreateError.InvalidGameId: return "invalid_game_id";
                case GameBranchCreateError.InvalidBranchTitle: return "invalid_branch_title";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public GameBranchCreateError DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "failure": return GameBranchCreateError.Failure;
                case "branch_title_already_exists": return GameBranchCreateError.BranchTitleAlreadyExists;
                case "invalid_game_id": return GameBranchCreateError.InvalidGameId;
                case "invalid_branch_title": return GameBranchCreateError.InvalidBranchTitle;
                default: throw new System.ArgumentException(nameof(jsonKey));
            }
        }
    }

    public sealed class GameBranchCreateResponseJsonSerializer : Json.Serialization.IJsonSerializer<GameBranchCreateResponse>
    {
        public static readonly GameBranchCreateResponseJsonSerializer Instance = new GameBranchCreateResponseJsonSerializer();

        public Json.ImmutableJson Serialize(GameBranchCreateResponse value)
        {
            var json = new Json.JsonObject();
            json["result"] = JsonSerializer.Bool.Serialize(value.Result);
            if (value.Error.HasValue)
                json["error"] = GameBranchCreateErrorJsonSerializer.Instance.Serialize(value.Error.Value);
            if (value.Branch != null)
                json["branch"] = GameBranchJsonSerializer.Instance.Serialize(value.Branch);
            return json;
        }

        public GameBranchCreateResponse Deserialize(Json.ImmutableJson json)
        {
            var result = new GameBranchCreateResponse();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, GameBranchCreateResponse value)
        {
            value.Result = JsonSerializer.Bool.Deserialize(json["result"]);
            Json.ImmutableJson jsonError;
            if (json.TryGetValue("error", out jsonError) && !jsonError.IsNull)
                value.Error = GameBranchCreateErrorJsonSerializer.Instance.Deserialize(jsonError);
            Json.ImmutableJson jsonBranch;
            if (json.TryGetValue("branch", out jsonBranch) && !jsonBranch.IsNull)
                value.Branch = GameBranchJsonSerializer.Instance.Deserialize(jsonBranch);
        }
    }

    public sealed class GameBranchUpdateRequestJsonSerializer : Json.Serialization.IJsonSerializer<GameBranchUpdateRequest>
    {
        public static readonly GameBranchUpdateRequestJsonSerializer Instance = new GameBranchUpdateRequestJsonSerializer();

        public Json.ImmutableJson Serialize(GameBranchUpdateRequest value)
        {
            var json = new Json.JsonObject();
            if (value.Title != null)
                json["title"] = JsonSerializer.String.Serialize(value.Title);
            if (value.Description != null)
                json["description"] = JsonSerializer.String.Serialize(value.Description);
            if (value.Password != null)
                json["password"] = JsonSerializer.String.Serialize(value.Password);
            if (value.GameEngine.HasValue)
                json["game_engine"] = GameEngineJsonSerializer.Instance.Serialize(value.GameEngine.Value);
            if (value.IsReportable.HasValue)
                json["is_reportable"] = JsonSerializer.Bool.Serialize(value.IsReportable.Value);
            if (value.IsPublic.HasValue)
                json["is_public"] = JsonSerializer.Bool.Serialize(value.IsPublic.Value);
            if (value.IsDeleted.HasValue)
                json["is_deleted"] = JsonSerializer.Bool.Serialize(value.IsDeleted.Value);
            return json;
        }

        public GameBranchUpdateRequest Deserialize(Json.ImmutableJson json)
        {
            var result = new GameBranchUpdateRequest();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, GameBranchUpdateRequest value)
        {
            Json.ImmutableJson jsonTitle;
            if (json.TryGetValue("title", out jsonTitle) && !jsonTitle.IsNull)
                value.Title = JsonSerializer.String.Deserialize(jsonTitle);
            Json.ImmutableJson jsonDescription;
            if (json.TryGetValue("description", out jsonDescription) && !jsonDescription.IsNull)
                value.Description = JsonSerializer.String.Deserialize(jsonDescription);
            Json.ImmutableJson jsonPassword;
            if (json.TryGetValue("password", out jsonPassword) && !jsonPassword.IsNull)
                value.Password = JsonSerializer.String.Deserialize(jsonPassword);
            Json.ImmutableJson jsonGameEngine;
            if (json.TryGetValue("game_engine", out jsonGameEngine) && !jsonGameEngine.IsNull)
                value.GameEngine = GameEngineJsonSerializer.Instance.Deserialize(jsonGameEngine);
            Json.ImmutableJson jsonIsReportable;
            if (json.TryGetValue("is_reportable", out jsonIsReportable) && !jsonIsReportable.IsNull)
                value.IsReportable = JsonSerializer.Bool.Deserialize(jsonIsReportable);
            Json.ImmutableJson jsonIsPublic;
            if (json.TryGetValue("is_public", out jsonIsPublic) && !jsonIsPublic.IsNull)
                value.IsPublic = JsonSerializer.Bool.Deserialize(jsonIsPublic);
            Json.ImmutableJson jsonIsDeleted;
            if (json.TryGetValue("is_deleted", out jsonIsDeleted) && !jsonIsDeleted.IsNull)
                value.IsDeleted = JsonSerializer.Bool.Deserialize(jsonIsDeleted);
        }
    }

    public sealed class GameBranchUpdateErrorJsonSerializer : Json.Serialization.IJsonSerializer<GameBranchUpdateError>, Json.Serialization.IJsonKeySerializer<GameBranchUpdateError>
    {
        public static readonly GameBranchUpdateErrorJsonSerializer Instance = new GameBranchUpdateErrorJsonSerializer();

        public Json.ImmutableJson Serialize(GameBranchUpdateError value)
        {
            return SerializeKey(value);
        }

        public GameBranchUpdateError Deserialize(Json.ImmutableJson json)
        {
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(GameBranchUpdateError value)
        {
            switch (value)
            {
                case GameBranchUpdateError.Failure: return "failure";
                case GameBranchUpdateError.RevMismatch: return "rev_mismatch";
                case GameBranchUpdateError.NothingToUpdate: return "nothing_to_update";
                case GameBranchUpdateError.BranchTitleAlreadyExists: return "branch_title_already_exists";
                case GameBranchUpdateError.InvalidBranchTitle: return "invalid_branch_title";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public GameBranchUpdateError DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "failure": return GameBranchUpdateError.Failure;
                case "rev_mismatch": return GameBranchUpdateError.RevMismatch;
                case "nothing_to_update": return GameBranchUpdateError.NothingToUpdate;
                case "branch_title_already_exists": return GameBranchUpdateError.BranchTitleAlreadyExists;
                case "invalid_branch_title": return GameBranchUpdateError.InvalidBranchTitle;
                default: throw new System.ArgumentException(nameof(jsonKey));
            }
        }
    }

    public sealed class GameBranchUpdateResponseJsonSerializer : Json.Serialization.IJsonSerializer<GameBranchUpdateResponse>
    {
        public static readonly GameBranchUpdateResponseJsonSerializer Instance = new GameBranchUpdateResponseJsonSerializer();

        public Json.ImmutableJson Serialize(GameBranchUpdateResponse value)
        {
            var json = new Json.JsonObject();
            json["result"] = JsonSerializer.Bool.Serialize(value.Result);
            if (value.Error.HasValue)
                json["error"] = GameBranchUpdateErrorJsonSerializer.Instance.Serialize(value.Error.Value);
            if (value.Branch != null)
                json["branch"] = GameBranchJsonSerializer.Instance.Serialize(value.Branch);
            return json;
        }

        public GameBranchUpdateResponse Deserialize(Json.ImmutableJson json)
        {
            var result = new GameBranchUpdateResponse();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, GameBranchUpdateResponse value)
        {
            value.Result = JsonSerializer.Bool.Deserialize(json["result"]);
            Json.ImmutableJson jsonError;
            if (json.TryGetValue("error", out jsonError) && !jsonError.IsNull)
                value.Error = GameBranchUpdateErrorJsonSerializer.Instance.Deserialize(jsonError);
            Json.ImmutableJson jsonBranch;
            if (json.TryGetValue("branch", out jsonBranch) && !jsonBranch.IsNull)
                value.Branch = GameBranchJsonSerializer.Instance.Deserialize(jsonBranch);
        }
    }

    public sealed class GameBranchBuildRequestJsonSerializer : Json.Serialization.IJsonSerializer<GameBranchBuildRequest>
    {
        public static readonly GameBranchBuildRequestJsonSerializer Instance = new GameBranchBuildRequestJsonSerializer();

        public Json.ImmutableJson Serialize(GameBranchBuildRequest value)
        {
            var json = new Json.JsonObject();
            json["build_id"] = JsonSerializer.Long.Serialize(value.BuildId);
            return json;
        }

        public GameBranchBuildRequest Deserialize(Json.ImmutableJson json)
        {
            var result = new GameBranchBuildRequest();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, GameBranchBuildRequest value)
        {
            value.BuildId = JsonSerializer.Long.Deserialize(json["build_id"]);
        }
    }

    public sealed class GameBranchBuildErrorJsonSerializer : Json.Serialization.IJsonSerializer<GameBranchBuildError>, Json.Serialization.IJsonKeySerializer<GameBranchBuildError>
    {
        public static readonly GameBranchBuildErrorJsonSerializer Instance = new GameBranchBuildErrorJsonSerializer();

        public Json.ImmutableJson Serialize(GameBranchBuildError value)
        {
            return SerializeKey(value);
        }

        public GameBranchBuildError Deserialize(Json.ImmutableJson json)
        {
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(GameBranchBuildError value)
        {
            switch (value)
            {
                case GameBranchBuildError.Failure: return "failure";
                case GameBranchBuildError.InvalidBuildId: return "invalid_build_id";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public GameBranchBuildError DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "failure": return GameBranchBuildError.Failure;
                case "invalid_build_id": return GameBranchBuildError.InvalidBuildId;
                default: throw new System.ArgumentException(nameof(jsonKey));
            }
        }
    }

    public sealed class GameBranchBuildResponseJsonSerializer : Json.Serialization.IJsonSerializer<GameBranchBuildResponse>
    {
        public static readonly GameBranchBuildResponseJsonSerializer Instance = new GameBranchBuildResponseJsonSerializer();

        public Json.ImmutableJson Serialize(GameBranchBuildResponse value)
        {
            var json = new Json.JsonObject();
            json["result"] = JsonSerializer.Bool.Serialize(value.Result);
            if (value.Error.HasValue)
                json["error"] = GameBranchBuildErrorJsonSerializer.Instance.Serialize(value.Error.Value);
            if (value.Branch != null)
                json["branch"] = GameBranchJsonSerializer.Instance.Serialize(value.Branch);
            return json;
        }

        public GameBranchBuildResponse Deserialize(Json.ImmutableJson json)
        {
            var result = new GameBranchBuildResponse();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, GameBranchBuildResponse value)
        {
            value.Result = JsonSerializer.Bool.Deserialize(json["result"]);
            Json.ImmutableJson jsonError;
            if (json.TryGetValue("error", out jsonError) && !jsonError.IsNull)
                value.Error = GameBranchBuildErrorJsonSerializer.Instance.Deserialize(jsonError);
            Json.ImmutableJson jsonBranch;
            if (json.TryGetValue("branch", out jsonBranch) && !jsonBranch.IsNull)
                value.Branch = GameBranchJsonSerializer.Instance.Deserialize(jsonBranch);
        }
    }

    public sealed class ClientAccountJsonSerializer : Json.Serialization.IJsonSerializer<ClientAccount>
    {
        public static readonly ClientAccountJsonSerializer Instance = new ClientAccountJsonSerializer();

        public Json.ImmutableJson Serialize(ClientAccount value)
        {
            if (value.Username == null)
                throw new System.InvalidOperationException("Required property Username is null");
            if (value.Email == null)
                throw new System.InvalidOperationException("Required property Email is null");

            if (value.CreatedAt == null)
                throw new System.InvalidOperationException("Required property CreatedAt is null");
            if (value.UpdatedAt == null)
                throw new System.InvalidOperationException("Required property UpdatedAt is null");
            var json = new Json.JsonObject();
            json["id"] = JsonSerializer.Long.Serialize(value.Id);
            json["rev"] = JsonSerializer.Int.Serialize(value.Rev);
            json["username"] = JsonSerializer.String.Serialize(value.Username);
            json["email"] = JsonSerializer.String.Serialize(value.Email);
            if (value.Phone != null)
                json["phone"] = JsonSerializer.String.Serialize(value.Phone);
            json["is_activated"] = JsonSerializer.Bool.Serialize(value.IsActivated);
            json["is_blocked"] = JsonSerializer.Bool.Serialize(value.IsBlocked);
            json["is_deleted"] = JsonSerializer.Bool.Serialize(value.IsDeleted);
            json["created_at"] = JsonSerializer.String.Serialize(value.CreatedAt);
            json["updated_at"] = JsonSerializer.String.Serialize(value.UpdatedAt);
            return json;
        }

        public ClientAccount Deserialize(Json.ImmutableJson json)
        {
            var result = new ClientAccount();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, ClientAccount value)
        {
            value.Id = JsonSerializer.Long.Deserialize(json["id"]);
            value.Rev = JsonSerializer.Int.Deserialize(json["rev"]);
            value.Username = JsonSerializer.String.Deserialize(json["username"]);
            value.Email = JsonSerializer.String.Deserialize(json["email"]);
            Json.ImmutableJson jsonPhone;
            if (json.TryGetValue("phone", out jsonPhone) && !jsonPhone.IsNull)
                value.Phone = JsonSerializer.String.Deserialize(jsonPhone);
            value.IsActivated = JsonSerializer.Bool.Deserialize(json["is_activated"]);
            value.IsBlocked = JsonSerializer.Bool.Deserialize(json["is_blocked"]);
            value.IsDeleted = JsonSerializer.Bool.Deserialize(json["is_deleted"]);
            value.CreatedAt = JsonSerializer.String.Deserialize(json["created_at"]);
            value.UpdatedAt = JsonSerializer.String.Deserialize(json["updated_at"]);
        }
    }

    public sealed class ClientAccountOrderByJsonSerializer : Json.Serialization.IJsonSerializer<ClientAccountOrderBy>, Json.Serialization.IJsonKeySerializer<ClientAccountOrderBy>
    {
        public static readonly ClientAccountOrderByJsonSerializer Instance = new ClientAccountOrderByJsonSerializer();

        public Json.ImmutableJson Serialize(ClientAccountOrderBy value)
        {
            return SerializeKey(value);
        }

        public ClientAccountOrderBy Deserialize(Json.ImmutableJson json)
        {
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(ClientAccountOrderBy value)
        {
            switch (value)
            {
                case ClientAccountOrderBy.Id: return "id";
                case ClientAccountOrderBy.Username: return "username";
                case ClientAccountOrderBy.Email: return "email";
                case ClientAccountOrderBy.IsActivated: return "is_activated";
                case ClientAccountOrderBy.IsBlocked: return "is_blocked";
                case ClientAccountOrderBy.IsDeleted: return "is_deleted";
                case ClientAccountOrderBy.CreatedAt: return "created_at";
                case ClientAccountOrderBy.UpdatedAt: return "updated_at";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public ClientAccountOrderBy DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "id": return ClientAccountOrderBy.Id;
                case "username": return ClientAccountOrderBy.Username;
                case "email": return ClientAccountOrderBy.Email;
                case "is_activated": return ClientAccountOrderBy.IsActivated;
                case "is_blocked": return ClientAccountOrderBy.IsBlocked;
                case "is_deleted": return ClientAccountOrderBy.IsDeleted;
                case "created_at": return ClientAccountOrderBy.CreatedAt;
                case "updated_at": return ClientAccountOrderBy.UpdatedAt;
                default: throw new System.ArgumentException(nameof(jsonKey));
            }
        }
    }

    public sealed class PersonnelAccountJsonSerializer : Json.Serialization.IJsonSerializer<PersonnelAccount>
    {
        public static readonly PersonnelAccountJsonSerializer Instance = new PersonnelAccountJsonSerializer();

        public Json.ImmutableJson Serialize(PersonnelAccount value)
        {
            if (value.Username == null)
                throw new System.InvalidOperationException("Required property Username is null");

            if (value.CreatedAt == null)
                throw new System.InvalidOperationException("Required property CreatedAt is null");
            if (value.UpdatedAt == null)
                throw new System.InvalidOperationException("Required property UpdatedAt is null");
            var json = new Json.JsonObject();
            json["id"] = JsonSerializer.Long.Serialize(value.Id);
            json["rev"] = JsonSerializer.Int.Serialize(value.Rev);
            json["username"] = JsonSerializer.String.Serialize(value.Username);
            if (value.Email != null)
                json["email"] = JsonSerializer.String.Serialize(value.Email);
            if (value.Phone != null)
                json["phone"] = JsonSerializer.String.Serialize(value.Phone);
            json["is_blocked"] = JsonSerializer.Bool.Serialize(value.IsBlocked);
            json["is_deleted"] = JsonSerializer.Bool.Serialize(value.IsDeleted);
            json["created_at"] = JsonSerializer.String.Serialize(value.CreatedAt);
            json["updated_at"] = JsonSerializer.String.Serialize(value.UpdatedAt);
            return json;
        }

        public PersonnelAccount Deserialize(Json.ImmutableJson json)
        {
            var result = new PersonnelAccount();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, PersonnelAccount value)
        {
            value.Id = JsonSerializer.Long.Deserialize(json["id"]);
            value.Rev = JsonSerializer.Int.Deserialize(json["rev"]);
            value.Username = JsonSerializer.String.Deserialize(json["username"]);
            Json.ImmutableJson jsonEmail;
            if (json.TryGetValue("email", out jsonEmail) && !jsonEmail.IsNull)
                value.Email = JsonSerializer.String.Deserialize(jsonEmail);
            Json.ImmutableJson jsonPhone;
            if (json.TryGetValue("phone", out jsonPhone) && !jsonPhone.IsNull)
                value.Phone = JsonSerializer.String.Deserialize(jsonPhone);
            value.IsBlocked = JsonSerializer.Bool.Deserialize(json["is_blocked"]);
            value.IsDeleted = JsonSerializer.Bool.Deserialize(json["is_deleted"]);
            value.CreatedAt = JsonSerializer.String.Deserialize(json["created_at"]);
            value.UpdatedAt = JsonSerializer.String.Deserialize(json["updated_at"]);
        }
    }

    public sealed class PersonnelAccountOrderByJsonSerializer : Json.Serialization.IJsonSerializer<PersonnelAccountOrderBy>, Json.Serialization.IJsonKeySerializer<PersonnelAccountOrderBy>
    {
        public static readonly PersonnelAccountOrderByJsonSerializer Instance = new PersonnelAccountOrderByJsonSerializer();

        public Json.ImmutableJson Serialize(PersonnelAccountOrderBy value)
        {
            return SerializeKey(value);
        }

        public PersonnelAccountOrderBy Deserialize(Json.ImmutableJson json)
        {
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(PersonnelAccountOrderBy value)
        {
            switch (value)
            {
                case PersonnelAccountOrderBy.Id: return "id";
                case PersonnelAccountOrderBy.Username: return "username";
                case PersonnelAccountOrderBy.Email: return "email";
                case PersonnelAccountOrderBy.IsBlocked: return "is_blocked";
                case PersonnelAccountOrderBy.IsDeleted: return "is_deleted";
                case PersonnelAccountOrderBy.CreatedAt: return "created_at";
                case PersonnelAccountOrderBy.UpdatedAt: return "updated_at";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public PersonnelAccountOrderBy DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "id": return PersonnelAccountOrderBy.Id;
                case "username": return PersonnelAccountOrderBy.Username;
                case "email": return PersonnelAccountOrderBy.Email;
                case "is_blocked": return PersonnelAccountOrderBy.IsBlocked;
                case "is_deleted": return PersonnelAccountOrderBy.IsDeleted;
                case "created_at": return PersonnelAccountOrderBy.CreatedAt;
                case "updated_at": return PersonnelAccountOrderBy.UpdatedAt;
                default: throw new System.ArgumentException(nameof(jsonKey));
            }
        }
    }

    public sealed class SettingsJsonSerializer : Json.Serialization.IJsonSerializer<Settings>
    {
        public static readonly SettingsJsonSerializer Instance = new SettingsJsonSerializer();

        public Json.ImmutableJson Serialize(Settings value)
        {
            var json = new Json.JsonObject();
            json["personnel_session_duration"] = JsonSerializer.Int.Serialize(value.PersonnelSessionDuration);
            json["client_session_duration"] = JsonSerializer.Int.Serialize(value.ClientSessionDuration);
            json["register_confirm_code_lifetime"] = JsonSerializer.Int.Serialize(value.RegisterConfirmCodeLifetime);
            json["phone_confirm_code_lifetime"] = JsonSerializer.Int.Serialize(value.PhoneConfirmCodeLifetime);
            json["password_reset_confirm_code_lifetime"] = JsonSerializer.Int.Serialize(value.PasswordResetConfirmCodeLifetime);
            return json;
        }

        public Settings Deserialize(Json.ImmutableJson json)
        {
            var result = new Settings();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, Settings value)
        {
            value.PersonnelSessionDuration = JsonSerializer.Int.Deserialize(json["personnel_session_duration"]);
            value.ClientSessionDuration = JsonSerializer.Int.Deserialize(json["client_session_duration"]);
            value.RegisterConfirmCodeLifetime = JsonSerializer.Int.Deserialize(json["register_confirm_code_lifetime"]);
            value.PhoneConfirmCodeLifetime = JsonSerializer.Int.Deserialize(json["phone_confirm_code_lifetime"]);
            value.PasswordResetConfirmCodeLifetime = JsonSerializer.Int.Deserialize(json["password_reset_confirm_code_lifetime"]);
        }
    }

    public sealed class SettingsUpdateRequestJsonSerializer : Json.Serialization.IJsonSerializer<SettingsUpdateRequest>
    {
        public static readonly SettingsUpdateRequestJsonSerializer Instance = new SettingsUpdateRequestJsonSerializer();

        public Json.ImmutableJson Serialize(SettingsUpdateRequest value)
        {
            var json = new Json.JsonObject();
            if (value.PersonnelSessionDuration.HasValue)
                json["personnel_session_duration"] = JsonSerializer.Int.Serialize(value.PersonnelSessionDuration.Value);
            if (value.ClientSessionDuration.HasValue)
                json["client_session_duration"] = JsonSerializer.Int.Serialize(value.ClientSessionDuration.Value);
            if (value.RegisterConfirmCodeLifetime.HasValue)
                json["register_confirm_code_lifetime"] = JsonSerializer.Int.Serialize(value.RegisterConfirmCodeLifetime.Value);
            if (value.PhoneConfirmCodeLifetime.HasValue)
                json["phone_confirm_code_lifetime"] = JsonSerializer.Int.Serialize(value.PhoneConfirmCodeLifetime.Value);
            if (value.PasswordResetConfirmCodeLifetime.HasValue)
                json["password_reset_confirm_code_lifetime"] = JsonSerializer.Int.Serialize(value.PasswordResetConfirmCodeLifetime.Value);
            return json;
        }

        public SettingsUpdateRequest Deserialize(Json.ImmutableJson json)
        {
            var result = new SettingsUpdateRequest();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, SettingsUpdateRequest value)
        {
            Json.ImmutableJson jsonPersonnelSessionDuration;
            if (json.TryGetValue("personnel_session_duration", out jsonPersonnelSessionDuration) && !jsonPersonnelSessionDuration.IsNull)
                value.PersonnelSessionDuration = JsonSerializer.Int.Deserialize(jsonPersonnelSessionDuration);
            Json.ImmutableJson jsonClientSessionDuration;
            if (json.TryGetValue("client_session_duration", out jsonClientSessionDuration) && !jsonClientSessionDuration.IsNull)
                value.ClientSessionDuration = JsonSerializer.Int.Deserialize(jsonClientSessionDuration);
            Json.ImmutableJson jsonRegisterConfirmCodeLifetime;
            if (json.TryGetValue("register_confirm_code_lifetime", out jsonRegisterConfirmCodeLifetime) && !jsonRegisterConfirmCodeLifetime.IsNull)
                value.RegisterConfirmCodeLifetime = JsonSerializer.Int.Deserialize(jsonRegisterConfirmCodeLifetime);
            Json.ImmutableJson jsonPhoneConfirmCodeLifetime;
            if (json.TryGetValue("phone_confirm_code_lifetime", out jsonPhoneConfirmCodeLifetime) && !jsonPhoneConfirmCodeLifetime.IsNull)
                value.PhoneConfirmCodeLifetime = JsonSerializer.Int.Deserialize(jsonPhoneConfirmCodeLifetime);
            Json.ImmutableJson jsonPasswordResetConfirmCodeLifetime;
            if (json.TryGetValue("password_reset_confirm_code_lifetime", out jsonPasswordResetConfirmCodeLifetime) && !jsonPasswordResetConfirmCodeLifetime.IsNull)
                value.PasswordResetConfirmCodeLifetime = JsonSerializer.Int.Deserialize(jsonPasswordResetConfirmCodeLifetime);
        }
    }

    public sealed class BuildJsonSerializer : Json.Serialization.IJsonSerializer<Build>
    {
        public static readonly BuildJsonSerializer Instance = new BuildJsonSerializer();

        public Json.ImmutableJson Serialize(Build value)
        {
            if (value.GameId == null)
                throw new System.InvalidOperationException("Required property GameId is null");
            if (value.GameTitle == null)
                throw new System.InvalidOperationException("Required property GameTitle is null");
            if (value.BranchTags == null)
                throw new System.InvalidOperationException("Required property BranchTags is null");
            if (value.BuildRev == null)
                throw new System.InvalidOperationException("Required property BuildRev is null");
            if (value.Commentary == null)
                throw new System.InvalidOperationException("Required property Commentary is null");
            if (value.ChangeList == null)
                throw new System.InvalidOperationException("Required property ChangeList is null");

            if (value.ExePath == null)
                throw new System.InvalidOperationException("Required property ExePath is null");
            if (value.LogPath == null)
                throw new System.InvalidOperationException("Required property LogPath is null");
            if (value.CdnRootUrl == null)
                throw new System.InvalidOperationException("Required property CdnRootUrl is null");

            if (value.CreatedAt == null)
                throw new System.InvalidOperationException("Required property CreatedAt is null");
            if (value.UpdatedAt == null)
                throw new System.InvalidOperationException("Required property UpdatedAt is null");
            var json = new Json.JsonObject();
            json["id"] = JsonSerializer.Long.Serialize(value.Id);
            json["rev"] = JsonSerializer.Int.Serialize(value.Rev);
            json["game_id"] = JsonSerializer.String.Serialize(value.GameId);
            json["game_title"] = JsonSerializer.String.Serialize(value.GameTitle);
            json["branch_tags"] = JsonSerializer.List(JsonSerializer.String).Serialize(value.BranchTags);
            json["build_rev"] = JsonSerializer.String.Serialize(value.BuildRev);
            json["commentary"] = JsonSerializer.String.Serialize(value.Commentary);
            json["change_list"] = JsonSerializer.String.Serialize(value.ChangeList);
            json["total_size"] = JsonSerializer.Long.Serialize(value.TotalSize);
            json["compressed_size"] = JsonSerializer.Long.Serialize(value.CompressedSize);
            json["exe_path"] = JsonSerializer.String.Serialize(value.ExePath);
            json["log_path"] = JsonSerializer.String.Serialize(value.LogPath);
            json["cdn_root_url"] = JsonSerializer.String.Serialize(value.CdnRootUrl);
            json["is_permanent"] = JsonSerializer.Bool.Serialize(value.IsPermanent);
            json["is_deleted"] = JsonSerializer.Bool.Serialize(value.IsDeleted);
            json["created_at"] = JsonSerializer.String.Serialize(value.CreatedAt);
            json["updated_at"] = JsonSerializer.String.Serialize(value.UpdatedAt);
            return json;
        }

        public Build Deserialize(Json.ImmutableJson json)
        {
            var result = new Build();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, Build value)
        {
            value.Id = JsonSerializer.Long.Deserialize(json["id"]);
            value.Rev = JsonSerializer.Int.Deserialize(json["rev"]);
            value.GameId = JsonSerializer.String.Deserialize(json["game_id"]);
            value.GameTitle = JsonSerializer.String.Deserialize(json["game_title"]);
            value.BranchTags = JsonSerializer.List(JsonSerializer.String).Deserialize(json["branch_tags"]);
            value.BuildRev = JsonSerializer.String.Deserialize(json["build_rev"]);
            value.Commentary = JsonSerializer.String.Deserialize(json["commentary"]);
            value.ChangeList = JsonSerializer.String.Deserialize(json["change_list"]);
            value.TotalSize = JsonSerializer.Long.Deserialize(json["total_size"]);
            value.CompressedSize = JsonSerializer.Long.Deserialize(json["compressed_size"]);
            value.ExePath = JsonSerializer.String.Deserialize(json["exe_path"]);
            value.LogPath = JsonSerializer.String.Deserialize(json["log_path"]);
            value.CdnRootUrl = JsonSerializer.String.Deserialize(json["cdn_root_url"]);
            value.IsPermanent = JsonSerializer.Bool.Deserialize(json["is_permanent"]);
            value.IsDeleted = JsonSerializer.Bool.Deserialize(json["is_deleted"]);
            value.CreatedAt = JsonSerializer.String.Deserialize(json["created_at"]);
            value.UpdatedAt = JsonSerializer.String.Deserialize(json["updated_at"]);
        }
    }

    public sealed class BuildOrderByJsonSerializer : Json.Serialization.IJsonSerializer<BuildOrderBy>, Json.Serialization.IJsonKeySerializer<BuildOrderBy>
    {
        public static readonly BuildOrderByJsonSerializer Instance = new BuildOrderByJsonSerializer();

        public Json.ImmutableJson Serialize(BuildOrderBy value)
        {
            return SerializeKey(value);
        }

        public BuildOrderBy Deserialize(Json.ImmutableJson json)
        {
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(BuildOrderBy value)
        {
            switch (value)
            {
                case BuildOrderBy.Id: return "id";
                case BuildOrderBy.GameId: return "game_id";
                case BuildOrderBy.GameTitle: return "game_title";
                case BuildOrderBy.BuildRev: return "build_rev";
                case BuildOrderBy.TotalSize: return "total_size";
                case BuildOrderBy.CompressedSize: return "compressed_size";
                case BuildOrderBy.IsDeleted: return "is_deleted";
                case BuildOrderBy.CreatedAt: return "created_at";
                case BuildOrderBy.UpdatedAt: return "updated_at";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public BuildOrderBy DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "id": return BuildOrderBy.Id;
                case "game_id": return BuildOrderBy.GameId;
                case "game_title": return BuildOrderBy.GameTitle;
                case "build_rev": return BuildOrderBy.BuildRev;
                case "total_size": return BuildOrderBy.TotalSize;
                case "compressed_size": return BuildOrderBy.CompressedSize;
                case "is_deleted": return BuildOrderBy.IsDeleted;
                case "created_at": return BuildOrderBy.CreatedAt;
                case "updated_at": return BuildOrderBy.UpdatedAt;
                default: throw new System.ArgumentException(nameof(jsonKey));
            }
        }
    }

    public sealed class BuildUpdateRequestJsonSerializer : Json.Serialization.IJsonSerializer<BuildUpdateRequest>
    {
        public static readonly BuildUpdateRequestJsonSerializer Instance = new BuildUpdateRequestJsonSerializer();

        public Json.ImmutableJson Serialize(BuildUpdateRequest value)
        {
            var json = new Json.JsonObject();
            if (value.Commentary != null)
                json["commentary"] = JsonSerializer.String.Serialize(value.Commentary);
            if (value.ChangeList != null)
                json["change_list"] = JsonSerializer.String.Serialize(value.ChangeList);
            if (value.IsPermanent.HasValue)
                json["is_permanent"] = JsonSerializer.Bool.Serialize(value.IsPermanent.Value);
            return json;
        }

        public BuildUpdateRequest Deserialize(Json.ImmutableJson json)
        {
            var result = new BuildUpdateRequest();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, BuildUpdateRequest value)
        {
            Json.ImmutableJson jsonCommentary;
            if (json.TryGetValue("commentary", out jsonCommentary) && !jsonCommentary.IsNull)
                value.Commentary = JsonSerializer.String.Deserialize(jsonCommentary);
            Json.ImmutableJson jsonChangeList;
            if (json.TryGetValue("change_list", out jsonChangeList) && !jsonChangeList.IsNull)
                value.ChangeList = JsonSerializer.String.Deserialize(jsonChangeList);
            Json.ImmutableJson jsonIsPermanent;
            if (json.TryGetValue("is_permanent", out jsonIsPermanent) && !jsonIsPermanent.IsNull)
                value.IsPermanent = JsonSerializer.Bool.Deserialize(jsonIsPermanent);
        }
    }

    public sealed class BuildUpdateErrorJsonSerializer : Json.Serialization.IJsonSerializer<BuildUpdateError>, Json.Serialization.IJsonKeySerializer<BuildUpdateError>
    {
        public static readonly BuildUpdateErrorJsonSerializer Instance = new BuildUpdateErrorJsonSerializer();

        public Json.ImmutableJson Serialize(BuildUpdateError value)
        {
            return SerializeKey(value);
        }

        public BuildUpdateError Deserialize(Json.ImmutableJson json)
        {
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(BuildUpdateError value)
        {
            switch (value)
            {
                case BuildUpdateError.Failure: return "failure";
                case BuildUpdateError.RevMismatch: return "rev_mismatch";
                case BuildUpdateError.NothingToUpdate: return "nothing_to_update";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public BuildUpdateError DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "failure": return BuildUpdateError.Failure;
                case "rev_mismatch": return BuildUpdateError.RevMismatch;
                case "nothing_to_update": return BuildUpdateError.NothingToUpdate;
                default: throw new System.ArgumentException(nameof(jsonKey));
            }
        }
    }

    public sealed class BuildUpdateResponseJsonSerializer : Json.Serialization.IJsonSerializer<BuildUpdateResponse>
    {
        public static readonly BuildUpdateResponseJsonSerializer Instance = new BuildUpdateResponseJsonSerializer();

        public Json.ImmutableJson Serialize(BuildUpdateResponse value)
        {
            var json = new Json.JsonObject();
            json["result"] = JsonSerializer.Bool.Serialize(value.Result);
            if (value.Error.HasValue)
                json["error"] = BuildUpdateErrorJsonSerializer.Instance.Serialize(value.Error.Value);
            if (value.Build != null)
                json["build"] = BuildJsonSerializer.Instance.Serialize(value.Build);
            return json;
        }

        public BuildUpdateResponse Deserialize(Json.ImmutableJson json)
        {
            var result = new BuildUpdateResponse();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, BuildUpdateResponse value)
        {
            value.Result = JsonSerializer.Bool.Deserialize(json["result"]);
            Json.ImmutableJson jsonError;
            if (json.TryGetValue("error", out jsonError) && !jsonError.IsNull)
                value.Error = BuildUpdateErrorJsonSerializer.Instance.Deserialize(jsonError);
            Json.ImmutableJson jsonBuild;
            if (json.TryGetValue("build", out jsonBuild) && !jsonBuild.IsNull)
                value.Build = BuildJsonSerializer.Instance.Deserialize(jsonBuild);
        }
    }

    public sealed class BuildDeleteErrorJsonSerializer : Json.Serialization.IJsonSerializer<BuildDeleteError>, Json.Serialization.IJsonKeySerializer<BuildDeleteError>
    {
        public static readonly BuildDeleteErrorJsonSerializer Instance = new BuildDeleteErrorJsonSerializer();

        public Json.ImmutableJson Serialize(BuildDeleteError value)
        {
            return SerializeKey(value);
        }

        public BuildDeleteError Deserialize(Json.ImmutableJson json)
        {
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(BuildDeleteError value)
        {
            switch (value)
            {
                case BuildDeleteError.Failure: return "failure";
                case BuildDeleteError.AlreadyDeleted: return "already_deleted";
                case BuildDeleteError.HasAssignedBranches: return "has_assigned_branches";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public BuildDeleteError DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "failure": return BuildDeleteError.Failure;
                case "already_deleted": return BuildDeleteError.AlreadyDeleted;
                case "has_assigned_branches": return BuildDeleteError.HasAssignedBranches;
                default: throw new System.ArgumentException(nameof(jsonKey));
            }
        }
    }

    public sealed class BuildDeleteResponseJsonSerializer : Json.Serialization.IJsonSerializer<BuildDeleteResponse>
    {
        public static readonly BuildDeleteResponseJsonSerializer Instance = new BuildDeleteResponseJsonSerializer();

        public Json.ImmutableJson Serialize(BuildDeleteResponse value)
        {
            var json = new Json.JsonObject();
            json["result"] = JsonSerializer.Bool.Serialize(value.Result);
            if (value.Error.HasValue)
                json["error"] = BuildDeleteErrorJsonSerializer.Instance.Serialize(value.Error.Value);
            if (value.Build != null)
                json["build"] = BuildJsonSerializer.Instance.Serialize(value.Build);
            return json;
        }

        public BuildDeleteResponse Deserialize(Json.ImmutableJson json)
        {
            var result = new BuildDeleteResponse();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, BuildDeleteResponse value)
        {
            value.Result = JsonSerializer.Bool.Deserialize(json["result"]);
            Json.ImmutableJson jsonError;
            if (json.TryGetValue("error", out jsonError) && !jsonError.IsNull)
                value.Error = BuildDeleteErrorJsonSerializer.Instance.Deserialize(jsonError);
            Json.ImmutableJson jsonBuild;
            if (json.TryGetValue("build", out jsonBuild) && !jsonBuild.IsNull)
                value.Build = BuildJsonSerializer.Instance.Deserialize(jsonBuild);
        }
    }

    public sealed class PopularGameJsonSerializer : Json.Serialization.IJsonSerializer<PopularGame>
    {
        public static readonly PopularGameJsonSerializer Instance = new PopularGameJsonSerializer();

        public Json.ImmutableJson Serialize(PopularGame value)
        {
            if (value.Id == null)
                throw new System.InvalidOperationException("Required property Id is null");
            if (value.Title == null)
                throw new System.InvalidOperationException("Required property Title is null");
            if (value.Description == null)
                throw new System.InvalidOperationException("Required property Description is null");

            if (value.Currency == null)
                throw new System.InvalidOperationException("Required property Currency is null");

            var json = new Json.JsonObject();
            json["id"] = JsonSerializer.String.Serialize(value.Id);
            json["title"] = JsonSerializer.String.Serialize(value.Title);
            json["description"] = JsonSerializer.String.Serialize(value.Description);
            json["price"] = JsonSerializer.Double.Serialize(value.Price);
            json["currency"] = JsonSerializer.String.Serialize(value.Currency);
            json["purchases"] = JsonSerializer.Int.Serialize(value.Purchases);
            return json;
        }

        public PopularGame Deserialize(Json.ImmutableJson json)
        {
            var result = new PopularGame();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, PopularGame value)
        {
            value.Id = JsonSerializer.String.Deserialize(json["id"]);
            value.Title = JsonSerializer.String.Deserialize(json["title"]);
            value.Description = JsonSerializer.String.Deserialize(json["description"]);
            value.Price = JsonSerializer.Double.Deserialize(json["price"]);
            value.Currency = JsonSerializer.String.Deserialize(json["currency"]);
            value.Purchases = JsonSerializer.Int.Deserialize(json["purchases"]);
        }
    }

    public sealed class PopularGameOrderByJsonSerializer : Json.Serialization.IJsonSerializer<PopularGameOrderBy>, Json.Serialization.IJsonKeySerializer<PopularGameOrderBy>
    {
        public static readonly PopularGameOrderByJsonSerializer Instance = new PopularGameOrderByJsonSerializer();

        public Json.ImmutableJson Serialize(PopularGameOrderBy value)
        {
            return SerializeKey(value);
        }

        public PopularGameOrderBy Deserialize(Json.ImmutableJson json)
        {
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(PopularGameOrderBy value)
        {
            switch (value)
            {
                case PopularGameOrderBy.Purchases: return "purchases";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public PopularGameOrderBy DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "purchases": return PopularGameOrderBy.Purchases;
                default: throw new System.ArgumentException(nameof(jsonKey));
            }
        }
    }

    public sealed class OrderDirectionStringSerializer : Igor.Serialization.IStringSerializer<OrderDirection>
    {
        public static readonly OrderDirectionStringSerializer Instance = new OrderDirectionStringSerializer();

        public string Serialize(OrderDirection value)
        {
            switch (value)
            {
                case OrderDirection.Asc: return "asc";
                case OrderDirection.Desc: return "desc";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public void Serialize(StringBuilder stringBuilder, OrderDirection value)
        {
            stringBuilder.Append(Serialize(value));
        }

        public OrderDirection Deserialize(string value)
        {
            switch (value)
            {
                case "asc": return OrderDirection.Asc;
                case "desc": return OrderDirection.Desc;
                default: throw new System.ArgumentException(nameof(value));
            }
        }
    }

    public sealed class GameEngineStringSerializer : Igor.Serialization.IStringSerializer<GameEngine>
    {
        public static readonly GameEngineStringSerializer Instance = new GameEngineStringSerializer();

        public string Serialize(GameEngine value)
        {
            switch (value)
            {
                case GameEngine.Generic: return "generic";
                case GameEngine.Ue4: return "ue4";
                case GameEngine.Unity: return "unity";
                case GameEngine.Hydra: return "hydra";
                case GameEngine.Cry: return "cry";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public void Serialize(StringBuilder stringBuilder, GameEngine value)
        {
            stringBuilder.Append(Serialize(value));
        }

        public GameEngine Deserialize(string value)
        {
            switch (value)
            {
                case "generic": return GameEngine.Generic;
                case "ue4": return GameEngine.Ue4;
                case "unity": return GameEngine.Unity;
                case "hydra": return GameEngine.Hydra;
                case "cry": return GameEngine.Cry;
                default: throw new System.ArgumentException(nameof(value));
            }
        }
    }

    public sealed class CurrencyStringSerializer : Igor.Serialization.IStringSerializer<Currency>
    {
        public static readonly CurrencyStringSerializer Instance = new CurrencyStringSerializer();

        public string Serialize(Currency value)
        {
            switch (value)
            {
                case Currency.Eur: return "eur";
                case Currency.Usd: return "usd";
                case Currency.Rub: return "rub";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public void Serialize(StringBuilder stringBuilder, Currency value)
        {
            stringBuilder.Append(Serialize(value));
        }

        public Currency Deserialize(string value)
        {
            switch (value)
            {
                case "eur": return Currency.Eur;
                case "usd": return Currency.Usd;
                case "rub": return Currency.Rub;
                default: throw new System.ArgumentException(nameof(value));
            }
        }
    }

    public sealed class GameOwnershipStringSerializer : Igor.Serialization.IStringSerializer<GameOwnership>
    {
        public static readonly GameOwnershipStringSerializer Instance = new GameOwnershipStringSerializer();

        public string Serialize(GameOwnership value)
        {
            switch (value)
            {
                case GameOwnership.None: return "none";
                case GameOwnership.Purchase: return "purchase";
                case GameOwnership.Grant: return "grant";
                case GameOwnership.Employee: return "employee";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public void Serialize(StringBuilder stringBuilder, GameOwnership value)
        {
            stringBuilder.Append(Serialize(value));
        }

        public GameOwnership Deserialize(string value)
        {
            switch (value)
            {
                case "none": return GameOwnership.None;
                case "purchase": return GameOwnership.Purchase;
                case "grant": return GameOwnership.Grant;
                case "employee": return GameOwnership.Employee;
                default: throw new System.ArgumentException(nameof(value));
            }
        }
    }

    public sealed class ClientRegistrationErrorStringSerializer : Igor.Serialization.IStringSerializer<ClientRegistrationError>
    {
        public static readonly ClientRegistrationErrorStringSerializer Instance = new ClientRegistrationErrorStringSerializer();

        public string Serialize(ClientRegistrationError value)
        {
            switch (value)
            {
                case ClientRegistrationError.Failure: return "failure";
                case ClientRegistrationError.InvalidEmail: return "invalid_email";
                case ClientRegistrationError.InvalidUsername: return "invalid_username";
                case ClientRegistrationError.InvalidPassword: return "invalid_password";
                case ClientRegistrationError.EmailAlreadyRegistered: return "email_already_registered";
                case ClientRegistrationError.UsernameAlreadyRegistered: return "username_already_registered";
                case ClientRegistrationError.AlreadyLoggedIn: return "already_logged_in";
                case ClientRegistrationError.InvalidCaptchaKey: return "invalid_captcha_key";
                case ClientRegistrationError.InvalidCaptchaResponse: return "invalid_captcha_response";
                case ClientRegistrationError.CaptchaExpired: return "captcha_expired";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public void Serialize(StringBuilder stringBuilder, ClientRegistrationError value)
        {
            stringBuilder.Append(Serialize(value));
        }

        public ClientRegistrationError Deserialize(string value)
        {
            switch (value)
            {
                case "failure": return ClientRegistrationError.Failure;
                case "invalid_email": return ClientRegistrationError.InvalidEmail;
                case "invalid_username": return ClientRegistrationError.InvalidUsername;
                case "invalid_password": return ClientRegistrationError.InvalidPassword;
                case "email_already_registered": return ClientRegistrationError.EmailAlreadyRegistered;
                case "username_already_registered": return ClientRegistrationError.UsernameAlreadyRegistered;
                case "already_logged_in": return ClientRegistrationError.AlreadyLoggedIn;
                case "invalid_captcha_key": return ClientRegistrationError.InvalidCaptchaKey;
                case "invalid_captcha_response": return ClientRegistrationError.InvalidCaptchaResponse;
                case "captcha_expired": return ClientRegistrationError.CaptchaExpired;
                default: throw new System.ArgumentException(nameof(value));
            }
        }
    }

    public sealed class ClientLoginErrorStringSerializer : Igor.Serialization.IStringSerializer<ClientLoginError>
    {
        public static readonly ClientLoginErrorStringSerializer Instance = new ClientLoginErrorStringSerializer();

        public string Serialize(ClientLoginError value)
        {
            switch (value)
            {
                case ClientLoginError.Failure: return "failure";
                case ClientLoginError.AlreadyLoggedIn: return "already_logged_in";
                case ClientLoginError.AccountNotExists: return "account_not_exists";
                case ClientLoginError.AccountNotActivated: return "account_not_activated";
                case ClientLoginError.AccountIsBlocked: return "account_is_blocked";
                case ClientLoginError.AccountIsDeleted: return "account_is_deleted";
                case ClientLoginError.InvalidPassword: return "invalid_password";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public void Serialize(StringBuilder stringBuilder, ClientLoginError value)
        {
            stringBuilder.Append(Serialize(value));
        }

        public ClientLoginError Deserialize(string value)
        {
            switch (value)
            {
                case "failure": return ClientLoginError.Failure;
                case "already_logged_in": return ClientLoginError.AlreadyLoggedIn;
                case "account_not_exists": return ClientLoginError.AccountNotExists;
                case "account_not_activated": return ClientLoginError.AccountNotActivated;
                case "account_is_blocked": return ClientLoginError.AccountIsBlocked;
                case "account_is_deleted": return ClientLoginError.AccountIsDeleted;
                case "invalid_password": return ClientLoginError.InvalidPassword;
                default: throw new System.ArgumentException(nameof(value));
            }
        }
    }

    public sealed class ClientPasswordResetErrorStringSerializer : Igor.Serialization.IStringSerializer<ClientPasswordResetError>
    {
        public static readonly ClientPasswordResetErrorStringSerializer Instance = new ClientPasswordResetErrorStringSerializer();

        public string Serialize(ClientPasswordResetError value)
        {
            switch (value)
            {
                case ClientPasswordResetError.Failure: return "failure";
                case ClientPasswordResetError.InvalidNewPassword: return "invalid_new_password";
                case ClientPasswordResetError.InvalidCaptchaKey: return "invalid_captcha_key";
                case ClientPasswordResetError.InvalidCaptchaResponse: return "invalid_captcha_response";
                case ClientPasswordResetError.CaptchaExpired: return "captcha_expired";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public void Serialize(StringBuilder stringBuilder, ClientPasswordResetError value)
        {
            stringBuilder.Append(Serialize(value));
        }

        public ClientPasswordResetError Deserialize(string value)
        {
            switch (value)
            {
                case "failure": return ClientPasswordResetError.Failure;
                case "invalid_new_password": return ClientPasswordResetError.InvalidNewPassword;
                case "invalid_captcha_key": return ClientPasswordResetError.InvalidCaptchaKey;
                case "invalid_captcha_response": return ClientPasswordResetError.InvalidCaptchaResponse;
                case "captcha_expired": return ClientPasswordResetError.CaptchaExpired;
                default: throw new System.ArgumentException(nameof(value));
            }
        }
    }

    public sealed class ClientPasswordChangeErrorStringSerializer : Igor.Serialization.IStringSerializer<ClientPasswordChangeError>
    {
        public static readonly ClientPasswordChangeErrorStringSerializer Instance = new ClientPasswordChangeErrorStringSerializer();

        public string Serialize(ClientPasswordChangeError value)
        {
            switch (value)
            {
                case ClientPasswordChangeError.Failure: return "failure";
                case ClientPasswordChangeError.InvalidCurrentPassword: return "invalid_current_password";
                case ClientPasswordChangeError.InvalidNewPassword: return "invalid_new_password";
                case ClientPasswordChangeError.NotLoggedIn: return "not_logged_in";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public void Serialize(StringBuilder stringBuilder, ClientPasswordChangeError value)
        {
            stringBuilder.Append(Serialize(value));
        }

        public ClientPasswordChangeError Deserialize(string value)
        {
            switch (value)
            {
                case "failure": return ClientPasswordChangeError.Failure;
                case "invalid_current_password": return ClientPasswordChangeError.InvalidCurrentPassword;
                case "invalid_new_password": return ClientPasswordChangeError.InvalidNewPassword;
                case "not_logged_in": return ClientPasswordChangeError.NotLoggedIn;
                default: throw new System.ArgumentException(nameof(value));
            }
        }
    }

    public sealed class PersonnelLoginErrorStringSerializer : Igor.Serialization.IStringSerializer<PersonnelLoginError>
    {
        public static readonly PersonnelLoginErrorStringSerializer Instance = new PersonnelLoginErrorStringSerializer();

        public string Serialize(PersonnelLoginError value)
        {
            switch (value)
            {
                case PersonnelLoginError.Failure: return "failure";
                case PersonnelLoginError.AlreadyLoggedIn: return "already_logged_in";
                case PersonnelLoginError.AccountNotExists: return "account_not_exists";
                case PersonnelLoginError.AccountIsBlocked: return "account_is_blocked";
                case PersonnelLoginError.AccountIsDeleted: return "account_is_deleted";
                case PersonnelLoginError.InvalidPassword: return "invalid_password";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public void Serialize(StringBuilder stringBuilder, PersonnelLoginError value)
        {
            stringBuilder.Append(Serialize(value));
        }

        public PersonnelLoginError Deserialize(string value)
        {
            switch (value)
            {
                case "failure": return PersonnelLoginError.Failure;
                case "already_logged_in": return PersonnelLoginError.AlreadyLoggedIn;
                case "account_not_exists": return PersonnelLoginError.AccountNotExists;
                case "account_is_blocked": return PersonnelLoginError.AccountIsBlocked;
                case "account_is_deleted": return PersonnelLoginError.AccountIsDeleted;
                case "invalid_password": return PersonnelLoginError.InvalidPassword;
                default: throw new System.ArgumentException(nameof(value));
            }
        }
    }

    public sealed class CaptchaErrorStringSerializer : Igor.Serialization.IStringSerializer<CaptchaError>
    {
        public static readonly CaptchaErrorStringSerializer Instance = new CaptchaErrorStringSerializer();

        public string Serialize(CaptchaError value)
        {
            switch (value)
            {
                case CaptchaError.Failure: return "failure";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public void Serialize(StringBuilder stringBuilder, CaptchaError value)
        {
            stringBuilder.Append(Serialize(value));
        }

        public CaptchaError Deserialize(string value)
        {
            switch (value)
            {
                case "failure": return CaptchaError.Failure;
                default: throw new System.ArgumentException(nameof(value));
            }
        }
    }

    public sealed class GameOrderByStringSerializer : Igor.Serialization.IStringSerializer<GameOrderBy>
    {
        public static readonly GameOrderByStringSerializer Instance = new GameOrderByStringSerializer();

        public string Serialize(GameOrderBy value)
        {
            switch (value)
            {
                case GameOrderBy.Id: return "id";
                case GameOrderBy.Title: return "title";
                case GameOrderBy.Description: return "description";
                case GameOrderBy.Price: return "price";
                case GameOrderBy.Currency: return "currency";
                case GameOrderBy.IsPublished: return "is_published";
                case GameOrderBy.IsDisabled: return "is_disabled";
                case GameOrderBy.IsDeleted: return "is_deleted";
                case GameOrderBy.CreatedAt: return "created_at";
                case GameOrderBy.UpdatedAt: return "updated_at";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public void Serialize(StringBuilder stringBuilder, GameOrderBy value)
        {
            stringBuilder.Append(Serialize(value));
        }

        public GameOrderBy Deserialize(string value)
        {
            switch (value)
            {
                case "id": return GameOrderBy.Id;
                case "title": return GameOrderBy.Title;
                case "description": return GameOrderBy.Description;
                case "price": return GameOrderBy.Price;
                case "currency": return GameOrderBy.Currency;
                case "is_published": return GameOrderBy.IsPublished;
                case "is_disabled": return GameOrderBy.IsDisabled;
                case "is_deleted": return GameOrderBy.IsDeleted;
                case "created_at": return GameOrderBy.CreatedAt;
                case "updated_at": return GameOrderBy.UpdatedAt;
                default: throw new System.ArgumentException(nameof(value));
            }
        }
    }

    public sealed class GameCreateErrorStringSerializer : Igor.Serialization.IStringSerializer<GameCreateError>
    {
        public static readonly GameCreateErrorStringSerializer Instance = new GameCreateErrorStringSerializer();

        public string Serialize(GameCreateError value)
        {
            switch (value)
            {
                case GameCreateError.Failure: return "failure";
                case GameCreateError.GameIdAlreadyExists: return "game_id_already_exists";
                case GameCreateError.GameTitleAlreadyExists: return "game_title_already_exists";
                case GameCreateError.InvalidPrice: return "invalid_price";
                case GameCreateError.InvalidCurrency: return "invalid_currency";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public void Serialize(StringBuilder stringBuilder, GameCreateError value)
        {
            stringBuilder.Append(Serialize(value));
        }

        public GameCreateError Deserialize(string value)
        {
            switch (value)
            {
                case "failure": return GameCreateError.Failure;
                case "game_id_already_exists": return GameCreateError.GameIdAlreadyExists;
                case "game_title_already_exists": return GameCreateError.GameTitleAlreadyExists;
                case "invalid_price": return GameCreateError.InvalidPrice;
                case "invalid_currency": return GameCreateError.InvalidCurrency;
                default: throw new System.ArgumentException(nameof(value));
            }
        }
    }

    public sealed class GameUpdateErrorStringSerializer : Igor.Serialization.IStringSerializer<GameUpdateError>
    {
        public static readonly GameUpdateErrorStringSerializer Instance = new GameUpdateErrorStringSerializer();

        public string Serialize(GameUpdateError value)
        {
            switch (value)
            {
                case GameUpdateError.Failure: return "failure";
                case GameUpdateError.RevMismatch: return "rev_mismatch";
                case GameUpdateError.NothingToUpdate: return "nothing_to_update";
                case GameUpdateError.GameTitleAlreadyExists: return "game_title_already_exists";
                case GameUpdateError.InvalidGameTitle: return "invalid_game_title";
                case GameUpdateError.InvalidJiraKey: return "invalid_jira_key";
                case GameUpdateError.InvalidSeleneKey: return "invalid_selene_key";
                case GameUpdateError.InvalidCiUrl: return "invalid_ci_url";
                case GameUpdateError.InvalidDiscordUrl: return "invalid_discord_url";
                case GameUpdateError.InvalidPrice: return "invalid_price";
                case GameUpdateError.InvalidCurrency: return "invalid_currency";
                case GameUpdateError.InvalidBuildLifetime: return "invalid_build_lifetime";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public void Serialize(StringBuilder stringBuilder, GameUpdateError value)
        {
            stringBuilder.Append(Serialize(value));
        }

        public GameUpdateError Deserialize(string value)
        {
            switch (value)
            {
                case "failure": return GameUpdateError.Failure;
                case "rev_mismatch": return GameUpdateError.RevMismatch;
                case "nothing_to_update": return GameUpdateError.NothingToUpdate;
                case "game_title_already_exists": return GameUpdateError.GameTitleAlreadyExists;
                case "invalid_game_title": return GameUpdateError.InvalidGameTitle;
                case "invalid_jira_key": return GameUpdateError.InvalidJiraKey;
                case "invalid_selene_key": return GameUpdateError.InvalidSeleneKey;
                case "invalid_ci_url": return GameUpdateError.InvalidCiUrl;
                case "invalid_discord_url": return GameUpdateError.InvalidDiscordUrl;
                case "invalid_price": return GameUpdateError.InvalidPrice;
                case "invalid_currency": return GameUpdateError.InvalidCurrency;
                case "invalid_build_lifetime": return GameUpdateError.InvalidBuildLifetime;
                default: throw new System.ArgumentException(nameof(value));
            }
        }
    }

    public sealed class GameBranchOrderByStringSerializer : Igor.Serialization.IStringSerializer<GameBranchOrderBy>
    {
        public static readonly GameBranchOrderByStringSerializer Instance = new GameBranchOrderByStringSerializer();

        public string Serialize(GameBranchOrderBy value)
        {
            switch (value)
            {
                case GameBranchOrderBy.Id: return "id";
                case GameBranchOrderBy.Title: return "title";
                case GameBranchOrderBy.BuildId: return "build_id";
                case GameBranchOrderBy.BuildRev: return "build_rev";
                case GameBranchOrderBy.BuildTotalSize: return "build_total_size";
                case GameBranchOrderBy.BuildCompressedSize: return "build_compressed_size";
                case GameBranchOrderBy.BuildCreatedAt: return "build_created_at";
                case GameBranchOrderBy.IsPublic: return "is_public";
                case GameBranchOrderBy.IsDefault: return "is_default";
                case GameBranchOrderBy.IsDeleted: return "is_deleted";
                case GameBranchOrderBy.CreatedAt: return "created_at";
                case GameBranchOrderBy.UpdatedAt: return "updated_at";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public void Serialize(StringBuilder stringBuilder, GameBranchOrderBy value)
        {
            stringBuilder.Append(Serialize(value));
        }

        public GameBranchOrderBy Deserialize(string value)
        {
            switch (value)
            {
                case "id": return GameBranchOrderBy.Id;
                case "title": return GameBranchOrderBy.Title;
                case "build_id": return GameBranchOrderBy.BuildId;
                case "build_rev": return GameBranchOrderBy.BuildRev;
                case "build_total_size": return GameBranchOrderBy.BuildTotalSize;
                case "build_compressed_size": return GameBranchOrderBy.BuildCompressedSize;
                case "build_created_at": return GameBranchOrderBy.BuildCreatedAt;
                case "is_public": return GameBranchOrderBy.IsPublic;
                case "is_default": return GameBranchOrderBy.IsDefault;
                case "is_deleted": return GameBranchOrderBy.IsDeleted;
                case "created_at": return GameBranchOrderBy.CreatedAt;
                case "updated_at": return GameBranchOrderBy.UpdatedAt;
                default: throw new System.ArgumentException(nameof(value));
            }
        }
    }

    public sealed class GameBranchCreateErrorStringSerializer : Igor.Serialization.IStringSerializer<GameBranchCreateError>
    {
        public static readonly GameBranchCreateErrorStringSerializer Instance = new GameBranchCreateErrorStringSerializer();

        public string Serialize(GameBranchCreateError value)
        {
            switch (value)
            {
                case GameBranchCreateError.Failure: return "failure";
                case GameBranchCreateError.BranchTitleAlreadyExists: return "branch_title_already_exists";
                case GameBranchCreateError.InvalidGameId: return "invalid_game_id";
                case GameBranchCreateError.InvalidBranchTitle: return "invalid_branch_title";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public void Serialize(StringBuilder stringBuilder, GameBranchCreateError value)
        {
            stringBuilder.Append(Serialize(value));
        }

        public GameBranchCreateError Deserialize(string value)
        {
            switch (value)
            {
                case "failure": return GameBranchCreateError.Failure;
                case "branch_title_already_exists": return GameBranchCreateError.BranchTitleAlreadyExists;
                case "invalid_game_id": return GameBranchCreateError.InvalidGameId;
                case "invalid_branch_title": return GameBranchCreateError.InvalidBranchTitle;
                default: throw new System.ArgumentException(nameof(value));
            }
        }
    }

    public sealed class GameBranchUpdateErrorStringSerializer : Igor.Serialization.IStringSerializer<GameBranchUpdateError>
    {
        public static readonly GameBranchUpdateErrorStringSerializer Instance = new GameBranchUpdateErrorStringSerializer();

        public string Serialize(GameBranchUpdateError value)
        {
            switch (value)
            {
                case GameBranchUpdateError.Failure: return "failure";
                case GameBranchUpdateError.RevMismatch: return "rev_mismatch";
                case GameBranchUpdateError.NothingToUpdate: return "nothing_to_update";
                case GameBranchUpdateError.BranchTitleAlreadyExists: return "branch_title_already_exists";
                case GameBranchUpdateError.InvalidBranchTitle: return "invalid_branch_title";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public void Serialize(StringBuilder stringBuilder, GameBranchUpdateError value)
        {
            stringBuilder.Append(Serialize(value));
        }

        public GameBranchUpdateError Deserialize(string value)
        {
            switch (value)
            {
                case "failure": return GameBranchUpdateError.Failure;
                case "rev_mismatch": return GameBranchUpdateError.RevMismatch;
                case "nothing_to_update": return GameBranchUpdateError.NothingToUpdate;
                case "branch_title_already_exists": return GameBranchUpdateError.BranchTitleAlreadyExists;
                case "invalid_branch_title": return GameBranchUpdateError.InvalidBranchTitle;
                default: throw new System.ArgumentException(nameof(value));
            }
        }
    }

    public sealed class GameBranchBuildErrorStringSerializer : Igor.Serialization.IStringSerializer<GameBranchBuildError>
    {
        public static readonly GameBranchBuildErrorStringSerializer Instance = new GameBranchBuildErrorStringSerializer();

        public string Serialize(GameBranchBuildError value)
        {
            switch (value)
            {
                case GameBranchBuildError.Failure: return "failure";
                case GameBranchBuildError.InvalidBuildId: return "invalid_build_id";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public void Serialize(StringBuilder stringBuilder, GameBranchBuildError value)
        {
            stringBuilder.Append(Serialize(value));
        }

        public GameBranchBuildError Deserialize(string value)
        {
            switch (value)
            {
                case "failure": return GameBranchBuildError.Failure;
                case "invalid_build_id": return GameBranchBuildError.InvalidBuildId;
                default: throw new System.ArgumentException(nameof(value));
            }
        }
    }

    public sealed class ClientAccountOrderByStringSerializer : Igor.Serialization.IStringSerializer<ClientAccountOrderBy>
    {
        public static readonly ClientAccountOrderByStringSerializer Instance = new ClientAccountOrderByStringSerializer();

        public string Serialize(ClientAccountOrderBy value)
        {
            switch (value)
            {
                case ClientAccountOrderBy.Id: return "id";
                case ClientAccountOrderBy.Username: return "username";
                case ClientAccountOrderBy.Email: return "email";
                case ClientAccountOrderBy.IsActivated: return "is_activated";
                case ClientAccountOrderBy.IsBlocked: return "is_blocked";
                case ClientAccountOrderBy.IsDeleted: return "is_deleted";
                case ClientAccountOrderBy.CreatedAt: return "created_at";
                case ClientAccountOrderBy.UpdatedAt: return "updated_at";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public void Serialize(StringBuilder stringBuilder, ClientAccountOrderBy value)
        {
            stringBuilder.Append(Serialize(value));
        }

        public ClientAccountOrderBy Deserialize(string value)
        {
            switch (value)
            {
                case "id": return ClientAccountOrderBy.Id;
                case "username": return ClientAccountOrderBy.Username;
                case "email": return ClientAccountOrderBy.Email;
                case "is_activated": return ClientAccountOrderBy.IsActivated;
                case "is_blocked": return ClientAccountOrderBy.IsBlocked;
                case "is_deleted": return ClientAccountOrderBy.IsDeleted;
                case "created_at": return ClientAccountOrderBy.CreatedAt;
                case "updated_at": return ClientAccountOrderBy.UpdatedAt;
                default: throw new System.ArgumentException(nameof(value));
            }
        }
    }

    public sealed class PersonnelAccountOrderByStringSerializer : Igor.Serialization.IStringSerializer<PersonnelAccountOrderBy>
    {
        public static readonly PersonnelAccountOrderByStringSerializer Instance = new PersonnelAccountOrderByStringSerializer();

        public string Serialize(PersonnelAccountOrderBy value)
        {
            switch (value)
            {
                case PersonnelAccountOrderBy.Id: return "id";
                case PersonnelAccountOrderBy.Username: return "username";
                case PersonnelAccountOrderBy.Email: return "email";
                case PersonnelAccountOrderBy.IsBlocked: return "is_blocked";
                case PersonnelAccountOrderBy.IsDeleted: return "is_deleted";
                case PersonnelAccountOrderBy.CreatedAt: return "created_at";
                case PersonnelAccountOrderBy.UpdatedAt: return "updated_at";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public void Serialize(StringBuilder stringBuilder, PersonnelAccountOrderBy value)
        {
            stringBuilder.Append(Serialize(value));
        }

        public PersonnelAccountOrderBy Deserialize(string value)
        {
            switch (value)
            {
                case "id": return PersonnelAccountOrderBy.Id;
                case "username": return PersonnelAccountOrderBy.Username;
                case "email": return PersonnelAccountOrderBy.Email;
                case "is_blocked": return PersonnelAccountOrderBy.IsBlocked;
                case "is_deleted": return PersonnelAccountOrderBy.IsDeleted;
                case "created_at": return PersonnelAccountOrderBy.CreatedAt;
                case "updated_at": return PersonnelAccountOrderBy.UpdatedAt;
                default: throw new System.ArgumentException(nameof(value));
            }
        }
    }

    public sealed class BuildOrderByStringSerializer : Igor.Serialization.IStringSerializer<BuildOrderBy>
    {
        public static readonly BuildOrderByStringSerializer Instance = new BuildOrderByStringSerializer();

        public string Serialize(BuildOrderBy value)
        {
            switch (value)
            {
                case BuildOrderBy.Id: return "id";
                case BuildOrderBy.GameId: return "game_id";
                case BuildOrderBy.GameTitle: return "game_title";
                case BuildOrderBy.BuildRev: return "build_rev";
                case BuildOrderBy.TotalSize: return "total_size";
                case BuildOrderBy.CompressedSize: return "compressed_size";
                case BuildOrderBy.IsDeleted: return "is_deleted";
                case BuildOrderBy.CreatedAt: return "created_at";
                case BuildOrderBy.UpdatedAt: return "updated_at";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public void Serialize(StringBuilder stringBuilder, BuildOrderBy value)
        {
            stringBuilder.Append(Serialize(value));
        }

        public BuildOrderBy Deserialize(string value)
        {
            switch (value)
            {
                case "id": return BuildOrderBy.Id;
                case "game_id": return BuildOrderBy.GameId;
                case "game_title": return BuildOrderBy.GameTitle;
                case "build_rev": return BuildOrderBy.BuildRev;
                case "total_size": return BuildOrderBy.TotalSize;
                case "compressed_size": return BuildOrderBy.CompressedSize;
                case "is_deleted": return BuildOrderBy.IsDeleted;
                case "created_at": return BuildOrderBy.CreatedAt;
                case "updated_at": return BuildOrderBy.UpdatedAt;
                default: throw new System.ArgumentException(nameof(value));
            }
        }
    }

    public sealed class BuildUpdateErrorStringSerializer : Igor.Serialization.IStringSerializer<BuildUpdateError>
    {
        public static readonly BuildUpdateErrorStringSerializer Instance = new BuildUpdateErrorStringSerializer();

        public string Serialize(BuildUpdateError value)
        {
            switch (value)
            {
                case BuildUpdateError.Failure: return "failure";
                case BuildUpdateError.RevMismatch: return "rev_mismatch";
                case BuildUpdateError.NothingToUpdate: return "nothing_to_update";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public void Serialize(StringBuilder stringBuilder, BuildUpdateError value)
        {
            stringBuilder.Append(Serialize(value));
        }

        public BuildUpdateError Deserialize(string value)
        {
            switch (value)
            {
                case "failure": return BuildUpdateError.Failure;
                case "rev_mismatch": return BuildUpdateError.RevMismatch;
                case "nothing_to_update": return BuildUpdateError.NothingToUpdate;
                default: throw new System.ArgumentException(nameof(value));
            }
        }
    }

    public sealed class BuildDeleteErrorStringSerializer : Igor.Serialization.IStringSerializer<BuildDeleteError>
    {
        public static readonly BuildDeleteErrorStringSerializer Instance = new BuildDeleteErrorStringSerializer();

        public string Serialize(BuildDeleteError value)
        {
            switch (value)
            {
                case BuildDeleteError.Failure: return "failure";
                case BuildDeleteError.AlreadyDeleted: return "already_deleted";
                case BuildDeleteError.HasAssignedBranches: return "has_assigned_branches";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public void Serialize(StringBuilder stringBuilder, BuildDeleteError value)
        {
            stringBuilder.Append(Serialize(value));
        }

        public BuildDeleteError Deserialize(string value)
        {
            switch (value)
            {
                case "failure": return BuildDeleteError.Failure;
                case "already_deleted": return BuildDeleteError.AlreadyDeleted;
                case "has_assigned_branches": return BuildDeleteError.HasAssignedBranches;
                default: throw new System.ArgumentException(nameof(value));
            }
        }
    }

    public sealed class PopularGameOrderByStringSerializer : Igor.Serialization.IStringSerializer<PopularGameOrderBy>
    {
        public static readonly PopularGameOrderByStringSerializer Instance = new PopularGameOrderByStringSerializer();

        public string Serialize(PopularGameOrderBy value)
        {
            switch (value)
            {
                case PopularGameOrderBy.Purchases: return "purchases";
                default: throw new System.ArgumentException(nameof(value));
            }
        }

        public void Serialize(StringBuilder stringBuilder, PopularGameOrderBy value)
        {
            stringBuilder.Append(Serialize(value));
        }

        public PopularGameOrderBy Deserialize(string value)
        {
            switch (value)
            {
                case "purchases": return PopularGameOrderBy.Purchases;
                default: throw new System.ArgumentException(nameof(value));
            }
        }
    }

    public class HeliosAuthService : System.IDisposable
    {
        protected HttpClient HttpClient { get; }

        public HeliosAuthService(HttpClient httpClient)
        {
            HttpClient = httpClient;
        }

        public void Dispose()
        {
            HttpClient.Dispose();
        }

        public async Task<ClientStatusResponse> GetClientStatusAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Get, "api/auth/client/status"))
            using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
            {
                httpResponse.EnsureSuccessStatusCode();
                using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                using (var reader = new StreamReader(responseStream))
                    return ClientStatusResponseJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
            }
        }

        public async Task<ClientRegisterResponse> RegisterClientAsync(ClientRegisterRequest request, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException(nameof(request));
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Post, "api/auth/client/register"))
            {
                httpRequest.Content = new StringContent(ClientRegisterRequestJsonSerializer.Instance.Serialize(request).ToString(), System.Text.Encoding.UTF8, "application/json");
                using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
                {
                    httpResponse.EnsureSuccessStatusCode();
                    using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                    using (var reader = new StreamReader(responseStream))
                        return ClientRegisterResponseJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
                }
            }
        }

        public async Task<GenericResponse> ConfirmClientRegistrationAsync(ClientRegisterConfirmRequest request, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException(nameof(request));
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Put, "api/auth/client/confirm"))
            {
                httpRequest.Content = new StringContent(ClientRegisterConfirmRequestJsonSerializer.Instance.Serialize(request).ToString(), System.Text.Encoding.UTF8, "application/json");
                using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
                {
                    httpResponse.EnsureSuccessStatusCode();
                    using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                    using (var reader = new StreamReader(responseStream))
                        return GenericResponseJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
                }
            }
        }

        public async Task<GenericResponse> ResendRegistrationCodeAsync(ClientResendRequest request, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException(nameof(request));
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Post, "api/auth/client/resend"))
            {
                httpRequest.Content = new StringContent(ClientResendRequestJsonSerializer.Instance.Serialize(request).ToString(), System.Text.Encoding.UTF8, "application/json");
                using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
                {
                    httpResponse.EnsureSuccessStatusCode();
                    using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                    using (var reader = new StreamReader(responseStream))
                        return GenericResponseJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
                }
            }
        }

        public async Task<ClientLoginResponse> LoginClientAsync(ClientLoginRequest request, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException(nameof(request));
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Post, "api/auth/client/login"))
            {
                httpRequest.Content = new StringContent(ClientLoginRequestJsonSerializer.Instance.Serialize(request).ToString(), System.Text.Encoding.UTF8, "application/json");
                using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
                {
                    httpResponse.EnsureSuccessStatusCode();
                    using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                    using (var reader = new StreamReader(responseStream))
                        return ClientLoginResponseJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
                }
            }
        }

        public async Task<GenericResponse> LogoutClientAsync(Empty request, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException(nameof(request));
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Put, "api/auth/client/logout"))
            {
                httpRequest.Content = new StringContent(EmptyJsonSerializer.Instance.Serialize(request).ToString(), System.Text.Encoding.UTF8, "application/json");
                using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
                {
                    httpResponse.EnsureSuccessStatusCode();
                    using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                    using (var reader = new StreamReader(responseStream))
                        return GenericResponseJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
                }
            }
        }

        public async Task<ClientPasswordResetResponse> ResetClientPasswordAsync(ClientPasswordResetRequest request, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException(nameof(request));
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Post, "api/auth/client/password/reset"))
            {
                httpRequest.Content = new StringContent(ClientPasswordResetRequestJsonSerializer.Instance.Serialize(request).ToString(), System.Text.Encoding.UTF8, "application/json");
                using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
                {
                    httpResponse.EnsureSuccessStatusCode();
                    using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                    using (var reader = new StreamReader(responseStream))
                        return ClientPasswordResetResponseJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
                }
            }
        }

        public async Task<GenericResponse> ConfirmClientPasswordResetAsync(ClientPasswordResetConfirmRequest request, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException(nameof(request));
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Put, "api/auth/client/password/confirm"))
            {
                httpRequest.Content = new StringContent(ClientPasswordResetConfirmRequestJsonSerializer.Instance.Serialize(request).ToString(), System.Text.Encoding.UTF8, "application/json");
                using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
                {
                    httpResponse.EnsureSuccessStatusCode();
                    using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                    using (var reader = new StreamReader(responseStream))
                        return GenericResponseJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
                }
            }
        }

        public async Task<ClientPasswordChangeResponse> ChangeClientPasswordAsync(ClientPasswordChangeRequest request, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException(nameof(request));
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Post, "api/auth/client/password/change"))
            {
                httpRequest.Content = new StringContent(ClientPasswordChangeRequestJsonSerializer.Instance.Serialize(request).ToString(), System.Text.Encoding.UTF8, "application/json");
                using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
                {
                    httpResponse.EnsureSuccessStatusCode();
                    using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                    using (var reader = new StreamReader(responseStream))
                        return ClientPasswordChangeResponseJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
                }
            }
        }

        public async Task<PersonnelStatusResponse> GetPersonnelStatusAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Get, "api/auth/personnel/status"))
            using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
            {
                httpResponse.EnsureSuccessStatusCode();
                using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                using (var reader = new StreamReader(responseStream))
                    return PersonnelStatusResponseJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
            }
        }

        public async Task<PersonnelLoginResponse> LoginPersonnelAsync(PersonnelLoginRequest request, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException(nameof(request));
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Post, "api/auth/personnel/login"))
            {
                httpRequest.Content = new StringContent(PersonnelLoginRequestJsonSerializer.Instance.Serialize(request).ToString(), System.Text.Encoding.UTF8, "application/json");
                using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
                {
                    httpResponse.EnsureSuccessStatusCode();
                    using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                    using (var reader = new StreamReader(responseStream))
                        return PersonnelLoginResponseJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
                }
            }
        }

        public async Task<GenericResponse> LogoutPersonnelAsync(Empty request, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException(nameof(request));
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Put, "api/auth/personnel/logout"))
            {
                httpRequest.Content = new StringContent(EmptyJsonSerializer.Instance.Serialize(request).ToString(), System.Text.Encoding.UTF8, "application/json");
                using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
                {
                    httpResponse.EnsureSuccessStatusCode();
                    using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                    using (var reader = new StreamReader(responseStream))
                        return GenericResponseJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
                }
            }
        }

        public async Task<CaptchaResponse> RequestCaptchaAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Get, "api/captcha"))
            using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
            {
                httpResponse.EnsureSuccessStatusCode();
                using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                using (var reader = new StreamReader(responseStream))
                    return CaptchaResponseJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
            }
        }
    }

    public class HeliosClientService : System.IDisposable
    {
        protected HttpClient HttpClient { get; }

        public HeliosClientService(HttpClient httpClient)
        {
            HttpClient = httpClient;
        }

        public void Dispose()
        {
            HttpClient.Dispose();
        }

        public async Task<GameItem> GetGameItemAsync(string guid, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Get, $"api/game/{guid}"))
            using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
            {
                httpResponse.EnsureSuccessStatusCode();
                using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                using (var reader = new StreamReader(responseStream))
                    return GameItemJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
            }
        }

        public async Task<GameItemList> GetGameItemListAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Get, "api/games"))
            using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
            {
                httpResponse.EnsureSuccessStatusCode();
                using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                using (var reader = new StreamReader(responseStream))
                    return GameItemListJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
            }
        }

        public async Task<GameManifest> GetGameManifestAsync(string guid, string branch, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Get, $"api/manifest/{guid}/{branch}"))
            using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
            {
                httpResponse.EnsureSuccessStatusCode();
                using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                using (var reader = new StreamReader(responseStream))
                    return GameManifestJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
            }
        }

        public async Task<GenericResponse> UnlockGameBranchAsync(BranchUnlockRequest request, string guid, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException(nameof(request));
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Put, $"api/branches/{guid}/unlock"))
            {
                httpRequest.Content = new StringContent(BranchUnlockRequestJsonSerializer.Instance.Serialize(request).ToString(), System.Text.Encoding.UTF8, "application/json");
                using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
                {
                    httpResponse.EnsureSuccessStatusCode();
                    using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                    using (var reader = new StreamReader(responseStream))
                        return GenericResponseJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
                }
            }
        }
    }

    public class HeliosAdminService : System.IDisposable
    {
        protected HttpClient HttpClient { get; }

        public HeliosAdminService(HttpClient httpClient)
        {
            HttpClient = httpClient;
        }

        public void Dispose()
        {
            HttpClient.Dispose();
        }

        public async Task<Game> GetGameAsync(string guid, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Get, $"api/admin/game/{guid}"))
            using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
            {
                httpResponse.EnsureSuccessStatusCode();
                using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                using (var reader = new StreamReader(responseStream))
                    return GameJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
            }
        }

        public async Task<CollectionSlice<Game>> GetGamesAsync(GameOrderBy orderBy, OrderDirection orderDir, int offset, int limit, CancellationToken cancellationToken = default(CancellationToken))
        {
            var queryBuilder = new WebQueryBuilder("api/admin/games");
            UriFormatter.FromStringSerializer(GameOrderByStringSerializer.Instance).AppendQueryParameter(queryBuilder, "order_by", orderBy);
            UriFormatter.FromStringSerializer(OrderDirectionStringSerializer.Instance).AppendQueryParameter(queryBuilder, "order_dir", orderDir);
            UriFormatter.Int.AppendQueryParameter(queryBuilder, "offset", offset);
            UriFormatter.Int.AppendQueryParameter(queryBuilder, "limit", limit);
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Get, queryBuilder.ToString()))
            using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
            {
                httpResponse.EnsureSuccessStatusCode();
                using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                using (var reader = new StreamReader(responseStream))
                    return new CollectionSliceJsonSerializer<Game>(GameJsonSerializer.Instance).Deserialize(Json.JsonParser.Parse(reader));
            }
        }

        public async Task<GameCreateResponse> CreateGameAsync(GameCreateRequest request, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException(nameof(request));
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Post, "api/admin/games"))
            {
                httpRequest.Content = new StringContent(GameCreateRequestJsonSerializer.Instance.Serialize(request).ToString(), System.Text.Encoding.UTF8, "application/json");
                using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
                {
                    httpResponse.EnsureSuccessStatusCode();
                    using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                    using (var reader = new StreamReader(responseStream))
                        return GameCreateResponseJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
                }
            }
        }

        public async Task<GameUpdateResponse> UpdateGameAsync(GameUpdateRequest request, string guid, int rev, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException(nameof(request));
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Put, $"api/admin/game/{guid}/{rev}"))
            {
                httpRequest.Content = new StringContent(GameUpdateRequestJsonSerializer.Instance.Serialize(request).ToString(), System.Text.Encoding.UTF8, "application/json");
                using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
                {
                    httpResponse.EnsureSuccessStatusCode();
                    using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                    using (var reader = new StreamReader(responseStream))
                        return GameUpdateResponseJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
                }
            }
        }

        public async Task<CollectionSlice<PopularGame>> GetPopularGamesAsync(PopularGameOrderBy orderBy, OrderDirection orderDir, int offset, int limit, CancellationToken cancellationToken = default(CancellationToken))
        {
            var queryBuilder = new WebQueryBuilder("api/admin/statistics/games/popular");
            UriFormatter.FromStringSerializer(PopularGameOrderByStringSerializer.Instance).AppendQueryParameter(queryBuilder, "order_by", orderBy);
            UriFormatter.FromStringSerializer(OrderDirectionStringSerializer.Instance).AppendQueryParameter(queryBuilder, "order_dir", orderDir);
            UriFormatter.Int.AppendQueryParameter(queryBuilder, "offset", offset);
            UriFormatter.Int.AppendQueryParameter(queryBuilder, "limit", limit);
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Get, queryBuilder.ToString()))
            using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
            {
                httpResponse.EnsureSuccessStatusCode();
                using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                using (var reader = new StreamReader(responseStream))
                    return new CollectionSliceJsonSerializer<PopularGame>(PopularGameJsonSerializer.Instance).Deserialize(Json.JsonParser.Parse(reader));
            }
        }

        public async Task<GameBranch> GetGameBranchAsync(long id, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Get, $"api/admin/branch/{id}"))
            using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
            {
                httpResponse.EnsureSuccessStatusCode();
                using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                using (var reader = new StreamReader(responseStream))
                    return GameBranchJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
            }
        }

        public async Task<CollectionSlice<GameBranch>> GetGameBranchesAsync(string guid, GameBranchOrderBy orderBy, OrderDirection orderDir, int offset, int limit, CancellationToken cancellationToken = default(CancellationToken))
        {
            var queryBuilder = new WebQueryBuilder($"api/admin/branches/{guid}");
            UriFormatter.FromStringSerializer(GameBranchOrderByStringSerializer.Instance).AppendQueryParameter(queryBuilder, "order_by", orderBy);
            UriFormatter.FromStringSerializer(OrderDirectionStringSerializer.Instance).AppendQueryParameter(queryBuilder, "order_dir", orderDir);
            UriFormatter.Int.AppendQueryParameter(queryBuilder, "offset", offset);
            UriFormatter.Int.AppendQueryParameter(queryBuilder, "limit", limit);
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Get, queryBuilder.ToString()))
            using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
            {
                httpResponse.EnsureSuccessStatusCode();
                using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                using (var reader = new StreamReader(responseStream))
                    return new CollectionSliceJsonSerializer<GameBranch>(GameBranchJsonSerializer.Instance).Deserialize(Json.JsonParser.Parse(reader));
            }
        }

        public async Task<List<GameBranch>> GetAllGameBranchesAsync(string guid, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Get, $"api/admin/branches/{guid}/all"))
            using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
            {
                httpResponse.EnsureSuccessStatusCode();
                using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                using (var reader = new StreamReader(responseStream))
                    return JsonSerializer.List(GameBranchJsonSerializer.Instance).Deserialize(Json.JsonParser.Parse(reader));
            }
        }

        public async Task<GameBranchCreateResponse> CreateGameBranchAsync(GameBranchCreateRequest request, string guid, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException(nameof(request));
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Post, $"api/admin/branches/{guid}"))
            {
                httpRequest.Content = new StringContent(GameBranchCreateRequestJsonSerializer.Instance.Serialize(request).ToString(), System.Text.Encoding.UTF8, "application/json");
                using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
                {
                    httpResponse.EnsureSuccessStatusCode();
                    using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                    using (var reader = new StreamReader(responseStream))
                        return GameBranchCreateResponseJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
                }
            }
        }

        public async Task<GameBranchUpdateResponse> UpdateGameBranchAsync(GameBranchUpdateRequest request, long id, int rev, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException(nameof(request));
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Put, $"api/admin/branch/{id}/{rev}"))
            {
                httpRequest.Content = new StringContent(GameBranchUpdateRequestJsonSerializer.Instance.Serialize(request).ToString(), System.Text.Encoding.UTF8, "application/json");
                using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
                {
                    httpResponse.EnsureSuccessStatusCode();
                    using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                    using (var reader = new StreamReader(responseStream))
                        return GameBranchUpdateResponseJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
                }
            }
        }

        public async Task<GameBranchBuildResponse> SetGameBranchBuildAsync(GameBranchBuildRequest request, long id, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException(nameof(request));
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Put, $"api/admin/branch/{id}/build"))
            {
                httpRequest.Content = new StringContent(GameBranchBuildRequestJsonSerializer.Instance.Serialize(request).ToString(), System.Text.Encoding.UTF8, "application/json");
                using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
                {
                    httpResponse.EnsureSuccessStatusCode();
                    using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                    using (var reader = new StreamReader(responseStream))
                        return GameBranchBuildResponseJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
                }
            }
        }

        public async Task<GenericResponse> SetGameBranchAsDefaultAsync(Empty request, long id, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException(nameof(request));
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Put, $"api/admin/branch/{id}/default"))
            {
                httpRequest.Content = new StringContent(EmptyJsonSerializer.Instance.Serialize(request).ToString(), System.Text.Encoding.UTF8, "application/json");
                using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
                {
                    httpResponse.EnsureSuccessStatusCode();
                    using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                    using (var reader = new StreamReader(responseStream))
                        return GenericResponseJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
                }
            }
        }

        public async Task<Build> GetBuildAsync(long id, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Get, $"api/admin/build/{id}"))
            using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
            {
                httpResponse.EnsureSuccessStatusCode();
                using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                using (var reader = new StreamReader(responseStream))
                    return BuildJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
            }
        }

        public async Task<CollectionSlice<Build>> GetBuildsAsync(BuildOrderBy orderBy, OrderDirection orderDir, int offset, int limit, bool? activeOnly = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var queryBuilder = new WebQueryBuilder("api/admin/builds");
            UriFormatter.FromStringSerializer(BuildOrderByStringSerializer.Instance).AppendQueryParameter(queryBuilder, "order_by", orderBy);
            UriFormatter.FromStringSerializer(OrderDirectionStringSerializer.Instance).AppendQueryParameter(queryBuilder, "order_dir", orderDir);
            UriFormatter.Int.AppendQueryParameter(queryBuilder, "offset", offset);
            UriFormatter.Int.AppendQueryParameter(queryBuilder, "limit", limit);
            if (activeOnly != null)
                UriFormatter.Bool.AppendQueryParameter(queryBuilder, "active_only", activeOnly.Value);
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Get, queryBuilder.ToString()))
            using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
            {
                httpResponse.EnsureSuccessStatusCode();
                using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                using (var reader = new StreamReader(responseStream))
                    return new CollectionSliceJsonSerializer<Build>(BuildJsonSerializer.Instance).Deserialize(Json.JsonParser.Parse(reader));
            }
        }

        public async Task<CollectionSlice<Build>> GetBuildsForGameAsync(string guid, BuildOrderBy orderBy, OrderDirection orderDir, int offset, int limit, CancellationToken cancellationToken = default(CancellationToken))
        {
            var queryBuilder = new WebQueryBuilder($"api/admin/builds/game/{guid}");
            UriFormatter.FromStringSerializer(BuildOrderByStringSerializer.Instance).AppendQueryParameter(queryBuilder, "order_by", orderBy);
            UriFormatter.FromStringSerializer(OrderDirectionStringSerializer.Instance).AppendQueryParameter(queryBuilder, "order_dir", orderDir);
            UriFormatter.Int.AppendQueryParameter(queryBuilder, "offset", offset);
            UriFormatter.Int.AppendQueryParameter(queryBuilder, "limit", limit);
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Get, queryBuilder.ToString()))
            using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
            {
                httpResponse.EnsureSuccessStatusCode();
                using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                using (var reader = new StreamReader(responseStream))
                    return new CollectionSliceJsonSerializer<Build>(BuildJsonSerializer.Instance).Deserialize(Json.JsonParser.Parse(reader));
            }
        }

        public async Task<BuildUpdateResponse> UpdateBuildAsync(BuildUpdateRequest request, long id, int rev, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException(nameof(request));
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Put, $"api/admin/build/{id}/{rev}"))
            {
                httpRequest.Content = new StringContent(BuildUpdateRequestJsonSerializer.Instance.Serialize(request).ToString(), System.Text.Encoding.UTF8, "application/json");
                using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
                {
                    httpResponse.EnsureSuccessStatusCode();
                    using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                    using (var reader = new StreamReader(responseStream))
                        return BuildUpdateResponseJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
                }
            }
        }

        public async Task<BuildDeleteResponse> DeleteBuildAsync(long id, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Delete, $"api/admin/build/{id}"))
            using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
            {
                httpResponse.EnsureSuccessStatusCode();
                using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                using (var reader = new StreamReader(responseStream))
                    return BuildDeleteResponseJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
            }
        }

        public async Task<ClientAccount> GetClientAccountAsync(long id, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Get, $"api/admin/client/{id}"))
            using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
            {
                httpResponse.EnsureSuccessStatusCode();
                using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                using (var reader = new StreamReader(responseStream))
                    return ClientAccountJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
            }
        }

        public async Task<CollectionSlice<ClientAccount>> GetClientAccountsAsync(ClientAccountOrderBy orderBy, OrderDirection orderDir, int offset, int limit, CancellationToken cancellationToken = default(CancellationToken))
        {
            var queryBuilder = new WebQueryBuilder("api/admin/clients");
            UriFormatter.FromStringSerializer(ClientAccountOrderByStringSerializer.Instance).AppendQueryParameter(queryBuilder, "order_by", orderBy);
            UriFormatter.FromStringSerializer(OrderDirectionStringSerializer.Instance).AppendQueryParameter(queryBuilder, "order_dir", orderDir);
            UriFormatter.Int.AppendQueryParameter(queryBuilder, "offset", offset);
            UriFormatter.Int.AppendQueryParameter(queryBuilder, "limit", limit);
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Get, queryBuilder.ToString()))
            using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
            {
                httpResponse.EnsureSuccessStatusCode();
                using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                using (var reader = new StreamReader(responseStream))
                    return new CollectionSliceJsonSerializer<ClientAccount>(ClientAccountJsonSerializer.Instance).Deserialize(Json.JsonParser.Parse(reader));
            }
        }

        public async Task<PersonnelAccount> GetPersonnelAccountAsync(long id, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Get, $"api/admin/personnel/{id}"))
            using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
            {
                httpResponse.EnsureSuccessStatusCode();
                using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                using (var reader = new StreamReader(responseStream))
                    return PersonnelAccountJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
            }
        }

        public async Task<CollectionSlice<PersonnelAccount>> GetPersonnelAccountsAsync(PersonnelAccountOrderBy orderBy, OrderDirection orderDir, int offset, int limit, CancellationToken cancellationToken = default(CancellationToken))
        {
            var queryBuilder = new WebQueryBuilder("api/admin/personnels");
            UriFormatter.FromStringSerializer(PersonnelAccountOrderByStringSerializer.Instance).AppendQueryParameter(queryBuilder, "order_by", orderBy);
            UriFormatter.FromStringSerializer(OrderDirectionStringSerializer.Instance).AppendQueryParameter(queryBuilder, "order_dir", orderDir);
            UriFormatter.Int.AppendQueryParameter(queryBuilder, "offset", offset);
            UriFormatter.Int.AppendQueryParameter(queryBuilder, "limit", limit);
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Get, queryBuilder.ToString()))
            using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
            {
                httpResponse.EnsureSuccessStatusCode();
                using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                using (var reader = new StreamReader(responseStream))
                    return new CollectionSliceJsonSerializer<PersonnelAccount>(PersonnelAccountJsonSerializer.Instance).Deserialize(Json.JsonParser.Parse(reader));
            }
        }

        public async Task<Settings> GetSettingsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Get, "api/admin/settings"))
            using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
            {
                httpResponse.EnsureSuccessStatusCode();
                using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                using (var reader = new StreamReader(responseStream))
                    return SettingsJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
            }
        }

        public async Task<GenericResponse> UpdateSettingsAsync(SettingsUpdateRequest request, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (request == null)
                throw new System.ArgumentNullException(nameof(request));
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Put, "api/admin/settings"))
            {
                httpRequest.Content = new StringContent(SettingsUpdateRequestJsonSerializer.Instance.Serialize(request).ToString(), System.Text.Encoding.UTF8, "application/json");
                using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken))
                {
                    httpResponse.EnsureSuccessStatusCode();
                    using (var responseStream = await httpResponse.Content.ReadAsStreamAsync())
                    using (var reader = new StreamReader(responseStream))
                        return GenericResponseJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
                }
            }
        }
    }
}
