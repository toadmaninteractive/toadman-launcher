// Author: Igor compiler
// Compiler version: igorc 1.5.0
// DO NOT EDIT THIS FILE - it is machine generated

using System.Collections.Generic;
using System.IO;

using IgorSerializer = Igor.Serialization.IgorSerializer;
using JsonSerializer = Json.Serialization.JsonSerializer;

namespace Protocol
{
    public enum Locale
    {
        En = 1,
        De = 2,
        Fr = 3,
        Ru = 4,
        Ja = 5,
        Zh = 6,
    }

    public sealed class LocaleBinarySerializer : Igor.Serialization.IBinarySerializer<Locale>
    {
        public static readonly LocaleBinarySerializer Instance = new LocaleBinarySerializer();

        public void Serialize(BinaryWriter writer, Locale value)
        {
            IgorSerializer.Byte.Serialize(writer, (byte)value);
        }

        public Locale Deserialize(BinaryReader reader)
        {
            return (Locale)IgorSerializer.Byte.Deserialize(reader);
        }
    }

    public sealed class LocaleJsonSerializer : Json.Serialization.IJsonSerializer<Locale>, Json.Serialization.IJsonKeySerializer<Locale>
    {
        public static readonly LocaleJsonSerializer Instance = new LocaleJsonSerializer();

        public Json.ImmutableJson Serialize(Locale value)
        {
            return SerializeKey(value);
        }

        public Locale Deserialize(Json.ImmutableJson json)
        {
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(Locale value)
        {
            switch (value)
            {
                case Locale.En: return "en";
                case Locale.De: return "de";
                case Locale.Fr: return "fr";
                case Locale.Ru: return "ru";
                case Locale.Ja: return "ja";
                case Locale.Zh: return "zh";
                default: throw new System.ArgumentException("value");
            }
        }

        public Locale DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "en": return Locale.En;
                case "de": return Locale.De;
                case "fr": return Locale.Fr;
                case "ru": return Locale.Ru;
                case "ja": return Locale.Ja;
                case "zh": return Locale.Zh;
                default: throw new System.ArgumentException("jsonKey");
            }
        }
    }

    public sealed class LocalizedEntry
    {
        public string Original { get; set; }
        public string Translation { get; set; }

        public LocalizedEntry()
        {
        }
    }

    public sealed class LocalizedEntryBinarySerializer : Igor.Serialization.IBinarySerializer<LocalizedEntry>
    {
        public static readonly LocalizedEntryBinarySerializer Instance = new LocalizedEntryBinarySerializer();

        public void Serialize(BinaryWriter writer, LocalizedEntry value)
        {
            if (value.Original == null)
                throw new System.InvalidOperationException("Required property Original is null");
            if (value.Translation == null)
                throw new System.InvalidOperationException("Required property Translation is null");
            IgorSerializer.String.Serialize(writer, value.Original);
            IgorSerializer.String.Serialize(writer, value.Translation);
        }

        public LocalizedEntry Deserialize(BinaryReader reader)
        {
            var result = new LocalizedEntry();
            Deserialize(reader, result);
            return result;
        }

        public void Deserialize(BinaryReader reader, LocalizedEntry value)
        {
            value.Original = IgorSerializer.String.Deserialize(reader);
            value.Translation = IgorSerializer.String.Deserialize(reader);
        }
    }

    public sealed class LocalizedEntryJsonSerializer : Json.Serialization.IJsonSerializer<LocalizedEntry>
    {
        public static readonly LocalizedEntryJsonSerializer Instance = new LocalizedEntryJsonSerializer();

        public Json.ImmutableJson Serialize(LocalizedEntry value)
        {
            if (value.Original == null)
                throw new System.InvalidOperationException("Required property Original is null");
            if (value.Translation == null)
                throw new System.InvalidOperationException("Required property Translation is null");
            var json = new Json.JsonObject();
            json["original"] = JsonSerializer.String.Serialize(value.Original);
            json["translation"] = JsonSerializer.String.Serialize(value.Translation);
            return json;
        }

        public LocalizedEntry Deserialize(Json.ImmutableJson json)
        {
            var result = new LocalizedEntry();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, LocalizedEntry value)
        {
            value.Original = JsonSerializer.String.Deserialize(json["original"]);
            value.Translation = JsonSerializer.String.Deserialize(json["translation"]);
        }
    }

    public sealed partial class LocalizedString
    {
        public string Text { get; set; }
        public Dictionary<Locale, LocalizedEntry> Data { get; set; }

        public LocalizedString()
        {
        }
    }

    public sealed class LocalizedStringBinarySerializer : Igor.Serialization.IBinarySerializer<LocalizedString>
    {
        public static readonly LocalizedStringBinarySerializer Instance = new LocalizedStringBinarySerializer();

        public void Serialize(BinaryWriter writer, LocalizedString value)
        {
            if (value.Text == null)
                throw new System.InvalidOperationException("Required property Text is null");
            if (value.Data == null)
                throw new System.InvalidOperationException("Required property Data is null");
            IgorSerializer.String.Serialize(writer, value.Text);
            IgorSerializer.Dict(LocaleBinarySerializer.Instance, LocalizedEntryBinarySerializer.Instance).Serialize(writer, value.Data);
        }

        public LocalizedString Deserialize(BinaryReader reader)
        {
            var result = new LocalizedString();
            Deserialize(reader, result);
            return result;
        }

        public void Deserialize(BinaryReader reader, LocalizedString value)
        {
            value.Text = IgorSerializer.String.Deserialize(reader);
            value.Data = IgorSerializer.Dict(LocaleBinarySerializer.Instance, LocalizedEntryBinarySerializer.Instance).Deserialize(reader);
        }
    }

    public sealed class LocalizedStringJsonSerializer : Json.Serialization.IJsonSerializer<LocalizedString>
    {
        public static readonly LocalizedStringJsonSerializer Instance = new LocalizedStringJsonSerializer();

        public Json.ImmutableJson Serialize(LocalizedString value)
        {
            if (value.Text == null)
                throw new System.InvalidOperationException("Required property Text is null");
            if (value.Data == null)
                throw new System.InvalidOperationException("Required property Data is null");
            var json = new Json.JsonObject();
            json["text"] = JsonSerializer.String.Serialize(value.Text);
            json["data"] = JsonSerializer.Dict(LocaleJsonSerializer.Instance, LocalizedEntryJsonSerializer.Instance).Serialize(value.Data);
            return json;
        }

        public LocalizedString Deserialize(Json.ImmutableJson json)
        {
            var result = new LocalizedString();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, LocalizedString value)
        {
            value.Text = JsonSerializer.String.Deserialize(json["text"]);
            value.Data = JsonSerializer.Dict(LocaleJsonSerializer.Instance, LocalizedEntryJsonSerializer.Instance).Deserialize(json["data"]);
        }
    }
}
