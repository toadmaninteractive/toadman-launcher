// Author: Igor compiler
// Compiler version: igorc 1.5.0
// DO NOT EDIT THIS FILE - it is machine generated

using System.Collections.Generic;
using System.IO;

using IgorSerializer = Igor.Serialization.IgorSerializer;
using JsonSerializer = Json.Serialization.JsonSerializer;

namespace Protocol
{
    public enum CardCategory
    {
        Strings = 1,
    }

    public sealed class CardCategoryBinarySerializer : Igor.Serialization.IBinarySerializer<CardCategory>
    {
        public static readonly CardCategoryBinarySerializer Instance = new CardCategoryBinarySerializer();

        public void Serialize(BinaryWriter writer, CardCategory value)
        {
            IgorSerializer.Byte.Serialize(writer, (byte)value);
        }

        public CardCategory Deserialize(BinaryReader reader)
        {
            return (CardCategory)IgorSerializer.Byte.Deserialize(reader);
        }
    }

    public sealed class CardCategoryJsonSerializer : Json.Serialization.IJsonSerializer<CardCategory>, Json.Serialization.IJsonKeySerializer<CardCategory>
    {
        public static readonly CardCategoryJsonSerializer Instance = new CardCategoryJsonSerializer();

        public Json.ImmutableJson Serialize(CardCategory value)
        {
            return SerializeKey(value);
        }

        public CardCategory Deserialize(Json.ImmutableJson json)
        {
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(CardCategory value)
        {
            switch (value)
            {
                case CardCategory.Strings: return "strings";
                default: throw new System.ArgumentException("value");
            }
        }

        public CardCategory DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "strings": return CardCategory.Strings;
                default: throw new System.ArgumentException("jsonKey");
            }
        }
    }

    public abstract partial class Card
    {
        public abstract CardCategory Category { get; }
        public string Id { get; set; }

        protected Card()
        {
        }
    }

    public sealed class CardBinarySerializer : Igor.Serialization.IBinarySerializer<Card>
    {
        public static readonly CardBinarySerializer Instance = new CardBinarySerializer();

        public void Serialize(BinaryWriter writer, Card value)
        {
            CardCategoryBinarySerializer.Instance.Serialize(writer, value.Category);
            switch (value.Category)
            {
                case CardCategory.Strings:
                    CardStringsBinarySerializer.Instance.Serialize(writer, (CardStrings)value);
                    break;

                default:
                    throw new System.ArgumentOutOfRangeException("category", value.Category, "Invalid variant tag");
            }
        }

        public Card Deserialize(BinaryReader reader)
        {
            CardCategory category = CardCategoryBinarySerializer.Instance.Deserialize(reader);
            switch (category)
            {
                case CardCategory.Strings:
                    return CardStringsBinarySerializer.Instance.Deserialize(reader);

                default:
                    throw new System.ArgumentOutOfRangeException("category", category, "Invalid variant tag");
            }
        }
    }

    public sealed class CardJsonSerializer : Json.Serialization.IJsonSerializer<Card>
    {
        public static readonly CardJsonSerializer Instance = new CardJsonSerializer();

        public Json.ImmutableJson Serialize(Card value)
        {
            switch (value.Category)
            {
                case CardCategory.Strings:
                    return CardStringsJsonSerializer.Instance.Serialize((CardStrings)value);

                default:
                    throw new System.ArgumentOutOfRangeException("category", value.Category, "Invalid variant tag");
            }
        }

        public Card Deserialize(Json.ImmutableJson json)
        {
            CardCategory category = CardCategoryJsonSerializer.Instance.Deserialize(json["category"]);
            switch (category)
            {
                case CardCategory.Strings:
                    return CardStringsJsonSerializer.Instance.Deserialize(json);

                default:
                    throw new System.ArgumentOutOfRangeException("category", category, "Invalid variant tag");
            }
        }
    }

    public sealed class CardStrings : Card
    {
        public override CardCategory Category
        {
            get { return CardCategory.Strings; }
        }

        public Dictionary<string, LocalizedString> Strings { get; set; }

        public CardStrings()
            : base()
        {
        }
    }

    public sealed class CardStringsBinarySerializer : Igor.Serialization.IBinarySerializer<CardStrings>
    {
        public static readonly CardStringsBinarySerializer Instance = new CardStringsBinarySerializer();

        public void Serialize(BinaryWriter writer, CardStrings value)
        {
            if (value.Id == null)
                throw new System.InvalidOperationException("Required property Id is null");
            if (value.Strings == null)
                throw new System.InvalidOperationException("Required property Strings is null");
            IgorSerializer.String.Serialize(writer, value.Id);
            IgorSerializer.Dict(IgorSerializer.String, LocalizedStringBinarySerializer.Instance).Serialize(writer, value.Strings);
        }

        public CardStrings Deserialize(BinaryReader reader)
        {
            var result = new CardStrings();
            Deserialize(reader, result);
            return result;
        }

        public void Deserialize(BinaryReader reader, CardStrings value)
        {
            value.Id = IgorSerializer.String.Deserialize(reader);
            value.Strings = IgorSerializer.Dict(IgorSerializer.String, LocalizedStringBinarySerializer.Instance).Deserialize(reader);
        }
    }

    public sealed class CardStringsJsonSerializer : Json.Serialization.IJsonSerializer<CardStrings>
    {
        public static readonly CardStringsJsonSerializer Instance = new CardStringsJsonSerializer();

        public Json.ImmutableJson Serialize(CardStrings value)
        {
            if (value.Id == null)
                throw new System.InvalidOperationException("Required property Id is null");
            if (value.Strings == null)
                throw new System.InvalidOperationException("Required property Strings is null");
            var json = new Json.JsonObject();
            json["category"] = CardCategoryJsonSerializer.Instance.Serialize(value.Category);
            json["_id"] = JsonSerializer.String.Serialize(value.Id);
            json["strings"] = JsonSerializer.Dict(JsonSerializer.String, LocalizedStringJsonSerializer.Instance).Serialize(value.Strings);
            return json;
        }

        public CardStrings Deserialize(Json.ImmutableJson json)
        {
            var result = new CardStrings();
            Deserialize(json.AsObject, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJsonObject json, CardStrings value)
        {
            value.Id = JsonSerializer.String.Deserialize(json["_id"]);
            value.Strings = JsonSerializer.Dict(JsonSerializer.String, LocalizedStringJsonSerializer.Instance).Deserialize(json["strings"]);
        }
    }
}
